import { expect, test } from "vitest";
import { {{pascalCase name}} } from "../src/services/{{snakeCase name}}";
import { getRandom } from './utils';

let entity_id;

test("Create", async () => {
    const response = await {{pascalCase name}}.create({
        {{#each attributes}}
        "{{snakeCase attribute}}": getRandom('{{type}}'),
        {{/each}}
    }, "unit test");
    expect(response).toBeDefined();
    expect(response!.id).toBeTruthy();
    entity_id = response!.id;
});

test("Update", async () => {
    const value = getRandom('{{attributes.0.type}}');
    const response = await {{pascalCase name}}.update(
        entity_id!,
        { "{{snakeCase attributes.0.attribute}}": value },
        "unit test"
    );
    expect(response).toBeDefined();
    expect(response!.{{snakeCase attributes.0.attribute}}).toEqual(value);
});

test("List", async () => {
    const response = await {{pascalCase name}}.list();
    expect(response).toBeDefined();
    expect(response.length).toBeGreaterThan(0);
});

test("Get by ID", async () => {
    const response = await {{pascalCase name}}.get(entity_id!);
    expect(response).toBeTruthy();
    expect(response!.id).toEqual(entity_id!);
});

test("Search", async () => {
    const response: any[] = await {{pascalCase name}}.findByCriteria({
        "id": entity_id!
    });
    expect(response).toBeTruthy();
    expect(response).toHaveLength(1);
    expect(response[0].id).toEqual(entity_id!);
});

test("Delete", async () => {
    const response = await {{pascalCase name}}.list();
    await {{pascalCase name}}.remove(entity_id!, "unit test");
    const list = await {{pascalCase name}}.list();

    expect(response).toBeTruthy();
    expect(list).toBeDefined();
});