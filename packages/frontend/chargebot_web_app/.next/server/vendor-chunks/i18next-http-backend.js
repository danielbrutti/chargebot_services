"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/i18next-http-backend";
exports.ids = ["vendor-chunks/i18next-http-backend"];
exports.modules = {

/***/ "(ssr)/./node_modules/i18next-http-backend/node_modules/cross-fetch/dist/node-ponyfill.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/i18next-http-backend/node_modules/cross-fetch/dist/node-ponyfill.js ***!
  \******************************************************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("\nconst nodeFetch = __webpack_require__(/*! node-fetch */ \"(ssr)/./node_modules/node-fetch/lib/index.mjs\");\nconst realFetch = nodeFetch.default || nodeFetch;\nconst fetch = function(url, options) {\n    // Support schemaless URIs on the server for parity with the browser.\n    // Ex: //github.com/ -> https://github.com/\n    if (/^\\/\\//.test(url)) {\n        url = \"https:\" + url;\n    }\n    return realFetch.call(this, url, options);\n};\nfetch.ponyfill = true;\nmodule.exports = exports = fetch;\nexports.fetch = fetch;\nexports.Headers = nodeFetch.Headers;\nexports.Request = nodeFetch.Request;\nexports.Response = nodeFetch.Response;\n// Needed for TypeScript consumers without esModuleInterop.\nexports[\"default\"] = fetch;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvaTE4bmV4dC1odHRwLWJhY2tlbmQvbm9kZV9tb2R1bGVzL2Nyb3NzLWZldGNoL2Rpc3Qvbm9kZS1wb255ZmlsbC5qcyIsIm1hcHBpbmdzIjoiO0FBQUEsTUFBTUEsWUFBWUMsbUJBQU9BLENBQUM7QUFDMUIsTUFBTUMsWUFBWUYsVUFBVUcsT0FBTyxJQUFJSDtBQUV2QyxNQUFNSSxRQUFRLFNBQVVDLEdBQUcsRUFBRUMsT0FBTztJQUNsQyxxRUFBcUU7SUFDckUsMkNBQTJDO0lBQzNDLElBQUksUUFBUUMsSUFBSSxDQUFDRixNQUFNO1FBQ3JCQSxNQUFNLFdBQVdBO0lBQ25CO0lBQ0EsT0FBT0gsVUFBVU0sSUFBSSxDQUFDLElBQUksRUFBRUgsS0FBS0M7QUFDbkM7QUFFQUYsTUFBTUssUUFBUSxHQUFHO0FBRWpCQyxPQUFPQyxPQUFPLEdBQUdBLFVBQVVQO0FBQzNCTyxhQUFhLEdBQUdQO0FBQ2hCTyxlQUFlLEdBQUdYLFVBQVVZLE9BQU87QUFDbkNELGVBQWUsR0FBR1gsVUFBVWEsT0FBTztBQUNuQ0YsZ0JBQWdCLEdBQUdYLFVBQVVjLFFBQVE7QUFFckMsMkRBQTJEO0FBQzNESCxrQkFBZSxHQUFHUCIsInNvdXJjZXMiOlsid2VicGFjazovL0BjaGFyZ2Vib3Qvd2ViLy4vbm9kZV9tb2R1bGVzL2kxOG5leHQtaHR0cC1iYWNrZW5kL25vZGVfbW9kdWxlcy9jcm9zcy1mZXRjaC9kaXN0L25vZGUtcG9ueWZpbGwuanM/ODIyYyJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBub2RlRmV0Y2ggPSByZXF1aXJlKCdub2RlLWZldGNoJylcbmNvbnN0IHJlYWxGZXRjaCA9IG5vZGVGZXRjaC5kZWZhdWx0IHx8IG5vZGVGZXRjaFxuXG5jb25zdCBmZXRjaCA9IGZ1bmN0aW9uICh1cmwsIG9wdGlvbnMpIHtcbiAgLy8gU3VwcG9ydCBzY2hlbWFsZXNzIFVSSXMgb24gdGhlIHNlcnZlciBmb3IgcGFyaXR5IHdpdGggdGhlIGJyb3dzZXIuXG4gIC8vIEV4OiAvL2dpdGh1Yi5jb20vIC0+IGh0dHBzOi8vZ2l0aHViLmNvbS9cbiAgaWYgKC9eXFwvXFwvLy50ZXN0KHVybCkpIHtcbiAgICB1cmwgPSAnaHR0cHM6JyArIHVybFxuICB9XG4gIHJldHVybiByZWFsRmV0Y2guY2FsbCh0aGlzLCB1cmwsIG9wdGlvbnMpXG59XG5cbmZldGNoLnBvbnlmaWxsID0gdHJ1ZVxuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMgPSBmZXRjaFxuZXhwb3J0cy5mZXRjaCA9IGZldGNoXG5leHBvcnRzLkhlYWRlcnMgPSBub2RlRmV0Y2guSGVhZGVyc1xuZXhwb3J0cy5SZXF1ZXN0ID0gbm9kZUZldGNoLlJlcXVlc3RcbmV4cG9ydHMuUmVzcG9uc2UgPSBub2RlRmV0Y2guUmVzcG9uc2VcblxuLy8gTmVlZGVkIGZvciBUeXBlU2NyaXB0IGNvbnN1bWVycyB3aXRob3V0IGVzTW9kdWxlSW50ZXJvcC5cbmV4cG9ydHMuZGVmYXVsdCA9IGZldGNoXG4iXSwibmFtZXMiOlsibm9kZUZldGNoIiwicmVxdWlyZSIsInJlYWxGZXRjaCIsImRlZmF1bHQiLCJmZXRjaCIsInVybCIsIm9wdGlvbnMiLCJ0ZXN0IiwiY2FsbCIsInBvbnlmaWxsIiwibW9kdWxlIiwiZXhwb3J0cyIsIkhlYWRlcnMiLCJSZXF1ZXN0IiwiUmVzcG9uc2UiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/i18next-http-backend/node_modules/cross-fetch/dist/node-ponyfill.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/i18next-http-backend/esm/getFetch.cjs":
/*!************************************************************!*\
  !*** ./node_modules/i18next-http-backend/esm/getFetch.cjs ***!
  \************************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("\nvar fetchApi;\nif (typeof fetch === \"function\") {\n    if (typeof global !== \"undefined\" && global.fetch) {\n        fetchApi = global.fetch;\n    } else if (false) {} else {\n        fetchApi = fetch;\n    }\n}\nif (true) {\n    var f = fetchApi || __webpack_require__(/*! cross-fetch */ \"(ssr)/./node_modules/i18next-http-backend/node_modules/cross-fetch/dist/node-ponyfill.js\");\n    if (f.default) f = f.default;\n    exports[\"default\"] = f;\n    module.exports = exports.default;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvaTE4bmV4dC1odHRwLWJhY2tlbmQvZXNtL2dldEZldGNoLmNqcyIsIm1hcHBpbmdzIjoiO0FBQUEsSUFBSUE7QUFDSixJQUFJLE9BQU9DLFVBQVUsWUFBWTtJQUMvQixJQUFJLE9BQU9DLFdBQVcsZUFBZUEsT0FBT0QsS0FBSyxFQUFFO1FBQ2pERCxXQUFXRSxPQUFPRCxLQUFLO0lBQ3pCLE9BQU8sSUFBSSxLQUE2QyxFQUFFLEVBRXpELE1BQU07UUFDTEQsV0FBV0M7SUFDYjtBQUNGO0FBRUEsSUFBSSxJQUF5RyxFQUFJO0lBQy9HLElBQUlLLElBQUlOLFlBQVlJLG1CQUFPQSxDQUFDO0lBQzVCLElBQUlFLEVBQUVDLE9BQU8sRUFBRUQsSUFBSUEsRUFBRUMsT0FBTztJQUM1QkMsa0JBQWUsR0FBR0Y7SUFDbEJHLE9BQU9ELE9BQU8sR0FBR0EsUUFBUUQsT0FBTztBQUNsQyIsInNvdXJjZXMiOlsid2VicGFjazovL0BjaGFyZ2Vib3Qvd2ViLy4vbm9kZV9tb2R1bGVzL2kxOG5leHQtaHR0cC1iYWNrZW5kL2VzbS9nZXRGZXRjaC5janM/Njc1MCJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgZmV0Y2hBcGlcbmlmICh0eXBlb2YgZmV0Y2ggPT09ICdmdW5jdGlvbicpIHtcbiAgaWYgKHR5cGVvZiBnbG9iYWwgIT09ICd1bmRlZmluZWQnICYmIGdsb2JhbC5mZXRjaCkge1xuICAgIGZldGNoQXBpID0gZ2xvYmFsLmZldGNoXG4gIH0gZWxzZSBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93LmZldGNoKSB7XG4gICAgZmV0Y2hBcGkgPSB3aW5kb3cuZmV0Y2hcbiAgfSBlbHNlIHtcbiAgICBmZXRjaEFwaSA9IGZldGNoXG4gIH1cbn1cblxuaWYgKHR5cGVvZiByZXF1aXJlICE9PSAndW5kZWZpbmVkJyAmJiAodHlwZW9mIHdpbmRvdyA9PT0gJ3VuZGVmaW5lZCcgfHwgdHlwZW9mIHdpbmRvdy5kb2N1bWVudCA9PT0gJ3VuZGVmaW5lZCcpKSB7XG4gIHZhciBmID0gZmV0Y2hBcGkgfHwgcmVxdWlyZSgnY3Jvc3MtZmV0Y2gnKVxuICBpZiAoZi5kZWZhdWx0KSBmID0gZi5kZWZhdWx0XG4gIGV4cG9ydHMuZGVmYXVsdCA9IGZcbiAgbW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzLmRlZmF1bHRcbn1cbiJdLCJuYW1lcyI6WyJmZXRjaEFwaSIsImZldGNoIiwiZ2xvYmFsIiwid2luZG93IiwicmVxdWlyZSIsImRvY3VtZW50IiwiZiIsImRlZmF1bHQiLCJleHBvcnRzIiwibW9kdWxlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/i18next-http-backend/esm/getFetch.cjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/i18next-http-backend/esm/index.js":
/*!********************************************************!*\
  !*** ./node_modules/i18next-http-backend/esm/index.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils.js */ \"(ssr)/./node_modules/i18next-http-backend/esm/utils.js\");\n/* harmony import */ var _request_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./request.js */ \"(ssr)/./node_modules/i18next-http-backend/esm/request.js\");\nfunction _typeof(o) {\n    \"@babel/helpers - typeof\";\n    return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function(o) {\n        return typeof o;\n    } : function(o) {\n        return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o;\n    }, _typeof(o);\n}\nfunction ownKeys(e, r) {\n    var t = Object.keys(e);\n    if (Object.getOwnPropertySymbols) {\n        var o = Object.getOwnPropertySymbols(e);\n        r && (o = o.filter(function(r) {\n            return Object.getOwnPropertyDescriptor(e, r).enumerable;\n        })), t.push.apply(t, o);\n    }\n    return t;\n}\nfunction _objectSpread(e) {\n    for(var r = 1; r < arguments.length; r++){\n        var t = null != arguments[r] ? arguments[r] : {};\n        r % 2 ? ownKeys(Object(t), !0).forEach(function(r) {\n            _defineProperty(e, r, t[r]);\n        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function(r) {\n            Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));\n        });\n    }\n    return e;\n}\nfunction _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n        throw new TypeError(\"Cannot call a class as a function\");\n    }\n}\nfunction _defineProperties(target, props) {\n    for(var i = 0; i < props.length; i++){\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);\n    }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n    Object.defineProperty(Constructor, \"prototype\", {\n        writable: false\n    });\n    return Constructor;\n}\nfunction _defineProperty(obj, key, value) {\n    key = _toPropertyKey(key);\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nfunction _toPropertyKey(t) {\n    var i = _toPrimitive(t, \"string\");\n    return \"symbol\" == _typeof(i) ? i : String(i);\n}\nfunction _toPrimitive(t, r) {\n    if (\"object\" != _typeof(t) || !t) return t;\n    var e = t[Symbol.toPrimitive];\n    if (void 0 !== e) {\n        var i = e.call(t, r || \"default\");\n        if (\"object\" != _typeof(i)) return i;\n        throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n    }\n    return (\"string\" === r ? String : Number)(t);\n}\n\n\nvar getDefaults = function getDefaults() {\n    return {\n        loadPath: \"/locales/{{lng}}/{{ns}}.json\",\n        addPath: \"/locales/add/{{lng}}/{{ns}}\",\n        parse: function parse(data) {\n            return JSON.parse(data);\n        },\n        stringify: JSON.stringify,\n        parsePayload: function parsePayload(namespace, key, fallbackValue) {\n            return _defineProperty({}, key, fallbackValue || \"\");\n        },\n        parseLoadPayload: function parseLoadPayload(languages, namespaces) {\n            return undefined;\n        },\n        request: _request_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"],\n        reloadInterval:  false ? 0 : 60 * 60 * 1000,\n        customHeaders: {},\n        queryStringParams: {},\n        crossDomain: false,\n        withCredentials: false,\n        overrideMimeType: false,\n        requestOptions: {\n            mode: \"cors\",\n            credentials: \"same-origin\",\n            cache: \"default\"\n        }\n    };\n};\nvar Backend = function() {\n    function Backend(services) {\n        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        var allOptions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n        _classCallCheck(this, Backend);\n        this.services = services;\n        this.options = options;\n        this.allOptions = allOptions;\n        this.type = \"backend\";\n        this.init(services, options, allOptions);\n    }\n    _createClass(Backend, [\n        {\n            key: \"init\",\n            value: function init(services) {\n                var _this = this;\n                var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n                var allOptions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n                this.services = services;\n                this.options = _objectSpread(_objectSpread(_objectSpread({}, getDefaults()), this.options || {}), options);\n                this.allOptions = allOptions;\n                if (this.services && this.options.reloadInterval) {\n                    setInterval(function() {\n                        return _this.reload();\n                    }, this.options.reloadInterval);\n                }\n            }\n        },\n        {\n            key: \"readMulti\",\n            value: function readMulti(languages, namespaces, callback) {\n                this._readAny(languages, languages, namespaces, namespaces, callback);\n            }\n        },\n        {\n            key: \"read\",\n            value: function read(language, namespace, callback) {\n                this._readAny([\n                    language\n                ], language, [\n                    namespace\n                ], namespace, callback);\n            }\n        },\n        {\n            key: \"_readAny\",\n            value: function _readAny(languages, loadUrlLanguages, namespaces, loadUrlNamespaces, callback) {\n                var _this2 = this;\n                var loadPath = this.options.loadPath;\n                if (typeof this.options.loadPath === \"function\") {\n                    loadPath = this.options.loadPath(languages, namespaces);\n                }\n                loadPath = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.makePromise)(loadPath);\n                loadPath.then(function(resolvedLoadPath) {\n                    if (!resolvedLoadPath) return callback(null, {});\n                    var url = _this2.services.interpolator.interpolate(resolvedLoadPath, {\n                        lng: languages.join(\"+\"),\n                        ns: namespaces.join(\"+\")\n                    });\n                    _this2.loadUrl(url, callback, loadUrlLanguages, loadUrlNamespaces);\n                });\n            }\n        },\n        {\n            key: \"loadUrl\",\n            value: function loadUrl(url, callback, languages, namespaces) {\n                var _this3 = this;\n                var lng = typeof languages === \"string\" ? [\n                    languages\n                ] : languages;\n                var ns = typeof namespaces === \"string\" ? [\n                    namespaces\n                ] : namespaces;\n                var payload = this.options.parseLoadPayload(lng, ns);\n                this.options.request(this.options, url, payload, function(err, res) {\n                    if (res && (res.status >= 500 && res.status < 600 || !res.status)) return callback(\"failed loading \" + url + \"; status code: \" + res.status, true);\n                    if (res && res.status >= 400 && res.status < 500) return callback(\"failed loading \" + url + \"; status code: \" + res.status, false);\n                    if (!res && err && err.message && err.message.indexOf(\"Failed to fetch\") > -1) return callback(\"failed loading \" + url + \": \" + err.message, true);\n                    if (err) return callback(err, false);\n                    var ret, parseErr;\n                    try {\n                        if (typeof res.data === \"string\") {\n                            ret = _this3.options.parse(res.data, languages, namespaces);\n                        } else {\n                            ret = res.data;\n                        }\n                    } catch (e) {\n                        parseErr = \"failed parsing \" + url + \" to json\";\n                    }\n                    if (parseErr) return callback(parseErr, false);\n                    callback(null, ret);\n                });\n            }\n        },\n        {\n            key: \"create\",\n            value: function create(languages, namespace, key, fallbackValue, callback) {\n                var _this4 = this;\n                if (!this.options.addPath) return;\n                if (typeof languages === \"string\") languages = [\n                    languages\n                ];\n                var payload = this.options.parsePayload(namespace, key, fallbackValue);\n                var finished = 0;\n                var dataArray = [];\n                var resArray = [];\n                languages.forEach(function(lng) {\n                    var addPath = _this4.options.addPath;\n                    if (typeof _this4.options.addPath === \"function\") {\n                        addPath = _this4.options.addPath(lng, namespace);\n                    }\n                    var url = _this4.services.interpolator.interpolate(addPath, {\n                        lng: lng,\n                        ns: namespace\n                    });\n                    _this4.options.request(_this4.options, url, payload, function(data, res) {\n                        finished += 1;\n                        dataArray.push(data);\n                        resArray.push(res);\n                        if (finished === languages.length) {\n                            if (typeof callback === \"function\") callback(dataArray, resArray);\n                        }\n                    });\n                });\n            }\n        },\n        {\n            key: \"reload\",\n            value: function reload() {\n                var _this5 = this;\n                var _this$services = this.services, backendConnector = _this$services.backendConnector, languageUtils = _this$services.languageUtils, logger = _this$services.logger;\n                var currentLanguage = backendConnector.language;\n                if (currentLanguage && currentLanguage.toLowerCase() === \"cimode\") return;\n                var toLoad = [];\n                var append = function append(lng) {\n                    var lngs = languageUtils.toResolveHierarchy(lng);\n                    lngs.forEach(function(l) {\n                        if (toLoad.indexOf(l) < 0) toLoad.push(l);\n                    });\n                };\n                append(currentLanguage);\n                if (this.allOptions.preload) this.allOptions.preload.forEach(function(l) {\n                    return append(l);\n                });\n                toLoad.forEach(function(lng) {\n                    _this5.allOptions.ns.forEach(function(ns) {\n                        backendConnector.read(lng, ns, \"read\", null, null, function(err, data) {\n                            if (err) logger.warn(\"loading namespace \".concat(ns, \" for language \").concat(lng, \" failed\"), err);\n                            if (!err && data) logger.log(\"loaded namespace \".concat(ns, \" for language \").concat(lng), data);\n                            backendConnector.loaded(\"\".concat(lng, \"|\").concat(ns), err, data);\n                        });\n                    });\n                });\n            }\n        }\n    ]);\n    return Backend;\n}();\nBackend.type = \"backend\";\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Backend);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvaTE4bmV4dC1odHRwLWJhY2tlbmQvZXNtL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLFNBQVNBLFFBQVFDLENBQUM7SUFBSTtJQUEyQixPQUFPRCxVQUFVLGNBQWMsT0FBT0UsVUFBVSxZQUFZLE9BQU9BLE9BQU9DLFFBQVEsR0FBRyxTQUFVRixDQUFDO1FBQUksT0FBTyxPQUFPQTtJQUFHLElBQUksU0FBVUEsQ0FBQztRQUFJLE9BQU9BLEtBQUssY0FBYyxPQUFPQyxVQUFVRCxFQUFFRyxXQUFXLEtBQUtGLFVBQVVELE1BQU1DLE9BQU9HLFNBQVMsR0FBRyxXQUFXLE9BQU9KO0lBQUcsR0FBR0QsUUFBUUM7QUFBSTtBQUM3VCxTQUFTSyxRQUFRQyxDQUFDLEVBQUVDLENBQUM7SUFBSSxJQUFJQyxJQUFJQyxPQUFPQyxJQUFJLENBQUNKO0lBQUksSUFBSUcsT0FBT0UscUJBQXFCLEVBQUU7UUFBRSxJQUFJWCxJQUFJUyxPQUFPRSxxQkFBcUIsQ0FBQ0w7UUFBSUMsS0FBTVAsQ0FBQUEsSUFBSUEsRUFBRVksTUFBTSxDQUFDLFNBQVVMLENBQUM7WUFBSSxPQUFPRSxPQUFPSSx3QkFBd0IsQ0FBQ1AsR0FBR0MsR0FBR08sVUFBVTtRQUFFLEVBQUMsR0FBSU4sRUFBRU8sSUFBSSxDQUFDQyxLQUFLLENBQUNSLEdBQUdSO0lBQUk7SUFBRSxPQUFPUTtBQUFHO0FBQzlQLFNBQVNTLGNBQWNYLENBQUM7SUFBSSxJQUFLLElBQUlDLElBQUksR0FBR0EsSUFBSVcsVUFBVUMsTUFBTSxFQUFFWixJQUFLO1FBQUUsSUFBSUMsSUFBSSxRQUFRVSxTQUFTLENBQUNYLEVBQUUsR0FBR1csU0FBUyxDQUFDWCxFQUFFLEdBQUcsQ0FBQztRQUFHQSxJQUFJLElBQUlGLFFBQVFJLE9BQU9ELElBQUksQ0FBQyxHQUFHWSxPQUFPLENBQUMsU0FBVWIsQ0FBQztZQUFJYyxnQkFBZ0JmLEdBQUdDLEdBQUdDLENBQUMsQ0FBQ0QsRUFBRTtR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Q21CLEtBQUssR0FBR0osT0FBTzFHLElBQUksQ0FBQzhHO29CQUN6QztnQkFDRjtnQkFDQUgsT0FBT0g7Z0JBQ1AsSUFBSSxJQUFJLENBQUMxQyxVQUFVLENBQUNpRCxPQUFPLEVBQUUsSUFBSSxDQUFDakQsVUFBVSxDQUFDaUQsT0FBTyxDQUFDMUcsT0FBTyxDQUFDLFNBQVV5RyxDQUFDO29CQUN0RSxPQUFPSCxPQUFPRztnQkFDaEI7Z0JBQ0FKLE9BQU9yRyxPQUFPLENBQUMsU0FBVTRFLEdBQUc7b0JBQzFCa0IsT0FBT3JDLFVBQVUsQ0FBQ3FCLEVBQUUsQ0FBQzlFLE9BQU8sQ0FBQyxTQUFVOEUsRUFBRTt3QkFDdkNrQixpQkFBaUI5QixJQUFJLENBQUNVLEtBQUtFLElBQUksUUFBUSxNQUFNLE1BQU0sU0FBVUksR0FBRyxFQUFFaEQsSUFBSTs0QkFDcEUsSUFBSWdELEtBQUtnQixPQUFPUyxJQUFJLENBQUMscUJBQXFCQyxNQUFNLENBQUM5QixJQUFJLGtCQUFrQjhCLE1BQU0sQ0FBQ2hDLEtBQUssWUFBWU07NEJBQy9GLElBQUksQ0FBQ0EsT0FBT2hELE1BQU1nRSxPQUFPVyxHQUFHLENBQUMsb0JBQW9CRCxNQUFNLENBQUM5QixJQUFJLGtCQUFrQjhCLE1BQU0sQ0FBQ2hDLE1BQU0xQzs0QkFDM0Y4RCxpQkFBaUJjLE1BQU0sQ0FBQyxHQUFHRixNQUFNLENBQUNoQyxLQUFLLEtBQUtnQyxNQUFNLENBQUM5QixLQUFLSSxLQUFLaEQ7d0JBQy9EO29CQUNGO2dCQUNGO1lBQ0Y7UUFDRjtLQUFFO0lBQ0YsT0FBT29CO0FBQ1Q7QUFDQUEsUUFBUUksSUFBSSxHQUFHO0FBQ2YsaUVBQWVKLE9BQU9BLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AY2hhcmdlYm90L3dlYi8uL25vZGVfbW9kdWxlcy9pMThuZXh0LWh0dHAtYmFja2VuZC9lc20vaW5kZXguanM/NjFjZCJdLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiBfdHlwZW9mKG8pIHsgXCJAYmFiZWwvaGVscGVycyAtIHR5cGVvZlwiOyByZXR1cm4gX3R5cGVvZiA9IFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sICYmIFwic3ltYm9sXCIgPT0gdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA/IGZ1bmN0aW9uIChvKSB7IHJldHVybiB0eXBlb2YgbzsgfSA6IGZ1bmN0aW9uIChvKSB7IHJldHVybiBvICYmIFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sICYmIG8uY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvOyB9LCBfdHlwZW9mKG8pOyB9XG5mdW5jdGlvbiBvd25LZXlzKGUsIHIpIHsgdmFyIHQgPSBPYmplY3Qua2V5cyhlKTsgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHsgdmFyIG8gPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKGUpOyByICYmIChvID0gby5maWx0ZXIoZnVuY3Rpb24gKHIpIHsgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoZSwgcikuZW51bWVyYWJsZTsgfSkpLCB0LnB1c2guYXBwbHkodCwgbyk7IH0gcmV0dXJuIHQ7IH1cbmZ1bmN0aW9uIF9vYmplY3RTcHJlYWQoZSkgeyBmb3IgKHZhciByID0gMTsgciA8IGFyZ3VtZW50cy5sZW5ndGg7IHIrKykgeyB2YXIgdCA9IG51bGwgIT0gYXJndW1lbnRzW3JdID8gYXJndW1lbnRzW3JdIDoge307IHIgJSAyID8gb3duS2V5cyhPYmplY3QodCksICEwKS5mb3JFYWNoKGZ1bmN0aW9uIChyKSB7IF9kZWZpbmVQcm9wZXJ0eShlLCByLCB0W3JdKTsgfSkgOiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyA/IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKGUsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHQpKSA6IG93bktleXMoT2JqZWN0KHQpKS5mb3JFYWNoKGZ1bmN0aW9uIChyKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLCByLCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHQsIHIpKTsgfSk7IH0gcmV0dXJuIGU7IH1cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIF90b1Byb3BlcnR5S2V5KGRlc2NyaXB0b3Iua2V5KSwgZGVzY3JpcHRvcik7IH0gfVxuZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyBPYmplY3QuZGVmaW5lUHJvcGVydHkoQ29uc3RydWN0b3IsIFwicHJvdG90eXBlXCIsIHsgd3JpdGFibGU6IGZhbHNlIH0pOyByZXR1cm4gQ29uc3RydWN0b3I7IH1cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHsga2V5ID0gX3RvUHJvcGVydHlLZXkoa2V5KTsgaWYgKGtleSBpbiBvYmopIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7IHZhbHVlOiB2YWx1ZSwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSB9KTsgfSBlbHNlIHsgb2JqW2tleV0gPSB2YWx1ZTsgfSByZXR1cm4gb2JqOyB9XG5mdW5jdGlvbiBfdG9Qcm9wZXJ0eUtleSh0KSB7IHZhciBpID0gX3RvUHJpbWl0aXZlKHQsIFwic3RyaW5nXCIpOyByZXR1cm4gXCJzeW1ib2xcIiA9PSBfdHlwZW9mKGkpID8gaSA6IFN0cmluZyhpKTsgfVxuZnVuY3Rpb24gX3RvUHJpbWl0aXZlKHQsIHIpIHsgaWYgKFwib2JqZWN0XCIgIT0gX3R5cGVvZih0KSB8fCAhdCkgcmV0dXJuIHQ7IHZhciBlID0gdFtTeW1ib2wudG9QcmltaXRpdmVdOyBpZiAodm9pZCAwICE9PSBlKSB7IHZhciBpID0gZS5jYWxsKHQsIHIgfHwgXCJkZWZhdWx0XCIpOyBpZiAoXCJvYmplY3RcIiAhPSBfdHlwZW9mKGkpKSByZXR1cm4gaTsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkBAdG9QcmltaXRpdmUgbXVzdCByZXR1cm4gYSBwcmltaXRpdmUgdmFsdWUuXCIpOyB9IHJldHVybiAoXCJzdHJpbmdcIiA9PT0gciA/IFN0cmluZyA6IE51bWJlcikodCk7IH1cbmltcG9ydCB7IG1ha2VQcm9taXNlIH0gZnJvbSAnLi91dGlscy5qcyc7XG5pbXBvcnQgcmVxdWVzdCBmcm9tICcuL3JlcXVlc3QuanMnO1xudmFyIGdldERlZmF1bHRzID0gZnVuY3Rpb24gZ2V0RGVmYXVsdHMoKSB7XG4gIHJldHVybiB7XG4gICAgbG9hZFBhdGg6ICcvbG9jYWxlcy97e2xuZ319L3t7bnN9fS5qc29uJyxcbiAgICBhZGRQYXRoOiAnL2xvY2FsZXMvYWRkL3t7bG5nfX0ve3tuc319JyxcbiAgICBwYXJzZTogZnVuY3Rpb24gcGFyc2UoZGF0YSkge1xuICAgICAgcmV0dXJuIEpTT04ucGFyc2UoZGF0YSk7XG4gICAgfSxcbiAgICBzdHJpbmdpZnk6IEpTT04uc3RyaW5naWZ5LFxuICAgIHBhcnNlUGF5bG9hZDogZnVuY3Rpb24gcGFyc2VQYXlsb2FkKG5hbWVzcGFjZSwga2V5LCBmYWxsYmFja1ZhbHVlKSB7XG4gICAgICByZXR1cm4gX2RlZmluZVByb3BlcnR5KHt9LCBrZXksIGZhbGxiYWNrVmFsdWUgfHwgJycpO1xuICAgIH0sXG4gICAgcGFyc2VMb2FkUGF5bG9hZDogZnVuY3Rpb24gcGFyc2VMb2FkUGF5bG9hZChsYW5ndWFnZXMsIG5hbWVzcGFjZXMpIHtcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfSxcbiAgICByZXF1ZXN0OiByZXF1ZXN0LFxuICAgIHJlbG9hZEludGVydmFsOiB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyA/IGZhbHNlIDogNjAgKiA2MCAqIDEwMDAsXG4gICAgY3VzdG9tSGVhZGVyczoge30sXG4gICAgcXVlcnlTdHJpbmdQYXJhbXM6IHt9LFxuICAgIGNyb3NzRG9tYWluOiBmYWxzZSxcbiAgICB3aXRoQ3JlZGVudGlhbHM6IGZhbHNlLFxuICAgIG92ZXJyaWRlTWltZVR5cGU6IGZhbHNlLFxuICAgIHJlcXVlc3RPcHRpb25zOiB7XG4gICAgICBtb2RlOiAnY29ycycsXG4gICAgICBjcmVkZW50aWFsczogJ3NhbWUtb3JpZ2luJyxcbiAgICAgIGNhY2hlOiAnZGVmYXVsdCdcbiAgICB9XG4gIH07XG59O1xudmFyIEJhY2tlbmQgPSBmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIEJhY2tlbmQoc2VydmljZXMpIHtcbiAgICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge307XG4gICAgdmFyIGFsbE9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IHt9O1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBCYWNrZW5kKTtcbiAgICB0aGlzLnNlcnZpY2VzID0gc2VydmljZXM7XG4gICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICB0aGlzLmFsbE9wdGlvbnMgPSBhbGxPcHRpb25zO1xuICAgIHRoaXMudHlwZSA9ICdiYWNrZW5kJztcbiAgICB0aGlzLmluaXQoc2VydmljZXMsIG9wdGlvbnMsIGFsbE9wdGlvbnMpO1xuICB9XG4gIF9jcmVhdGVDbGFzcyhCYWNrZW5kLCBbe1xuICAgIGtleTogXCJpbml0XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGluaXQoc2VydmljZXMpIHtcbiAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge307XG4gICAgICB2YXIgYWxsT3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDoge307XG4gICAgICB0aGlzLnNlcnZpY2VzID0gc2VydmljZXM7XG4gICAgICB0aGlzLm9wdGlvbnMgPSBfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgZ2V0RGVmYXVsdHMoKSksIHRoaXMub3B0aW9ucyB8fCB7fSksIG9wdGlvbnMpO1xuICAgICAgdGhpcy5hbGxPcHRpb25zID0gYWxsT3B0aW9ucztcbiAgICAgIGlmICh0aGlzLnNlcnZpY2VzICYmIHRoaXMub3B0aW9ucy5yZWxvYWRJbnRlcnZhbCkge1xuICAgICAgICBzZXRJbnRlcnZhbChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgcmV0dXJuIF90aGlzLnJlbG9hZCgpO1xuICAgICAgICB9LCB0aGlzLm9wdGlvbnMucmVsb2FkSW50ZXJ2YWwpO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJyZWFkTXVsdGlcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVhZE11bHRpKGxhbmd1YWdlcywgbmFtZXNwYWNlcywgY2FsbGJhY2spIHtcbiAgICAgIHRoaXMuX3JlYWRBbnkobGFuZ3VhZ2VzLCBsYW5ndWFnZXMsIG5hbWVzcGFjZXMsIG5hbWVzcGFjZXMsIGNhbGxiYWNrKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwicmVhZFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZWFkKGxhbmd1YWdlLCBuYW1lc3BhY2UsIGNhbGxiYWNrKSB7XG4gICAgICB0aGlzLl9yZWFkQW55KFtsYW5ndWFnZV0sIGxhbmd1YWdlLCBbbmFtZXNwYWNlXSwgbmFtZXNwYWNlLCBjYWxsYmFjayk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIl9yZWFkQW55XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9yZWFkQW55KGxhbmd1YWdlcywgbG9hZFVybExhbmd1YWdlcywgbmFtZXNwYWNlcywgbG9hZFVybE5hbWVzcGFjZXMsIGNhbGxiYWNrKSB7XG4gICAgICB2YXIgX3RoaXMyID0gdGhpcztcbiAgICAgIHZhciBsb2FkUGF0aCA9IHRoaXMub3B0aW9ucy5sb2FkUGF0aDtcbiAgICAgIGlmICh0eXBlb2YgdGhpcy5vcHRpb25zLmxvYWRQYXRoID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIGxvYWRQYXRoID0gdGhpcy5vcHRpb25zLmxvYWRQYXRoKGxhbmd1YWdlcywgbmFtZXNwYWNlcyk7XG4gICAgICB9XG4gICAgICBsb2FkUGF0aCA9IG1ha2VQcm9taXNlKGxvYWRQYXRoKTtcbiAgICAgIGxvYWRQYXRoLnRoZW4oZnVuY3Rpb24gKHJlc29sdmVkTG9hZFBhdGgpIHtcbiAgICAgICAgaWYgKCFyZXNvbHZlZExvYWRQYXRoKSByZXR1cm4gY2FsbGJhY2sobnVsbCwge30pO1xuICAgICAgICB2YXIgdXJsID0gX3RoaXMyLnNlcnZpY2VzLmludGVycG9sYXRvci5pbnRlcnBvbGF0ZShyZXNvbHZlZExvYWRQYXRoLCB7XG4gICAgICAgICAgbG5nOiBsYW5ndWFnZXMuam9pbignKycpLFxuICAgICAgICAgIG5zOiBuYW1lc3BhY2VzLmpvaW4oJysnKVxuICAgICAgICB9KTtcbiAgICAgICAgX3RoaXMyLmxvYWRVcmwodXJsLCBjYWxsYmFjaywgbG9hZFVybExhbmd1YWdlcywgbG9hZFVybE5hbWVzcGFjZXMpO1xuICAgICAgfSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImxvYWRVcmxcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gbG9hZFVybCh1cmwsIGNhbGxiYWNrLCBsYW5ndWFnZXMsIG5hbWVzcGFjZXMpIHtcbiAgICAgIHZhciBfdGhpczMgPSB0aGlzO1xuICAgICAgdmFyIGxuZyA9IHR5cGVvZiBsYW5ndWFnZXMgPT09ICdzdHJpbmcnID8gW2xhbmd1YWdlc10gOiBsYW5ndWFnZXM7XG4gICAgICB2YXIgbnMgPSB0eXBlb2YgbmFtZXNwYWNlcyA9PT0gJ3N0cmluZycgPyBbbmFtZXNwYWNlc10gOiBuYW1lc3BhY2VzO1xuICAgICAgdmFyIHBheWxvYWQgPSB0aGlzLm9wdGlvbnMucGFyc2VMb2FkUGF5bG9hZChsbmcsIG5zKTtcbiAgICAgIHRoaXMub3B0aW9ucy5yZXF1ZXN0KHRoaXMub3B0aW9ucywgdXJsLCBwYXlsb2FkLCBmdW5jdGlvbiAoZXJyLCByZXMpIHtcbiAgICAgICAgaWYgKHJlcyAmJiAocmVzLnN0YXR1cyA+PSA1MDAgJiYgcmVzLnN0YXR1cyA8IDYwMCB8fCAhcmVzLnN0YXR1cykpIHJldHVybiBjYWxsYmFjaygnZmFpbGVkIGxvYWRpbmcgJyArIHVybCArICc7IHN0YXR1cyBjb2RlOiAnICsgcmVzLnN0YXR1cywgdHJ1ZSk7XG4gICAgICAgIGlmIChyZXMgJiYgcmVzLnN0YXR1cyA+PSA0MDAgJiYgcmVzLnN0YXR1cyA8IDUwMCkgcmV0dXJuIGNhbGxiYWNrKCdmYWlsZWQgbG9hZGluZyAnICsgdXJsICsgJzsgc3RhdHVzIGNvZGU6ICcgKyByZXMuc3RhdHVzLCBmYWxzZSk7XG4gICAgICAgIGlmICghcmVzICYmIGVyciAmJiBlcnIubWVzc2FnZSAmJiBlcnIubWVzc2FnZS5pbmRleE9mKCdGYWlsZWQgdG8gZmV0Y2gnKSA+IC0xKSByZXR1cm4gY2FsbGJhY2soJ2ZhaWxlZCBsb2FkaW5nICcgKyB1cmwgKyAnOiAnICsgZXJyLm1lc3NhZ2UsIHRydWUpO1xuICAgICAgICBpZiAoZXJyKSByZXR1cm4gY2FsbGJhY2soZXJyLCBmYWxzZSk7XG4gICAgICAgIHZhciByZXQsIHBhcnNlRXJyO1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGlmICh0eXBlb2YgcmVzLmRhdGEgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICByZXQgPSBfdGhpczMub3B0aW9ucy5wYXJzZShyZXMuZGF0YSwgbGFuZ3VhZ2VzLCBuYW1lc3BhY2VzKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0ID0gcmVzLmRhdGE7XG4gICAgICAgICAgfVxuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgcGFyc2VFcnIgPSAnZmFpbGVkIHBhcnNpbmcgJyArIHVybCArICcgdG8ganNvbic7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHBhcnNlRXJyKSByZXR1cm4gY2FsbGJhY2socGFyc2VFcnIsIGZhbHNlKTtcbiAgICAgICAgY2FsbGJhY2sobnVsbCwgcmV0KTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJjcmVhdGVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY3JlYXRlKGxhbmd1YWdlcywgbmFtZXNwYWNlLCBrZXksIGZhbGxiYWNrVmFsdWUsIGNhbGxiYWNrKSB7XG4gICAgICB2YXIgX3RoaXM0ID0gdGhpcztcbiAgICAgIGlmICghdGhpcy5vcHRpb25zLmFkZFBhdGgpIHJldHVybjtcbiAgICAgIGlmICh0eXBlb2YgbGFuZ3VhZ2VzID09PSAnc3RyaW5nJykgbGFuZ3VhZ2VzID0gW2xhbmd1YWdlc107XG4gICAgICB2YXIgcGF5bG9hZCA9IHRoaXMub3B0aW9ucy5wYXJzZVBheWxvYWQobmFtZXNwYWNlLCBrZXksIGZhbGxiYWNrVmFsdWUpO1xuICAgICAgdmFyIGZpbmlzaGVkID0gMDtcbiAgICAgIHZhciBkYXRhQXJyYXkgPSBbXTtcbiAgICAgIHZhciByZXNBcnJheSA9IFtdO1xuICAgICAgbGFuZ3VhZ2VzLmZvckVhY2goZnVuY3Rpb24gKGxuZykge1xuICAgICAgICB2YXIgYWRkUGF0aCA9IF90aGlzNC5vcHRpb25zLmFkZFBhdGg7XG4gICAgICAgIGlmICh0eXBlb2YgX3RoaXM0Lm9wdGlvbnMuYWRkUGF0aCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIGFkZFBhdGggPSBfdGhpczQub3B0aW9ucy5hZGRQYXRoKGxuZywgbmFtZXNwYWNlKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgdXJsID0gX3RoaXM0LnNlcnZpY2VzLmludGVycG9sYXRvci5pbnRlcnBvbGF0ZShhZGRQYXRoLCB7XG4gICAgICAgICAgbG5nOiBsbmcsXG4gICAgICAgICAgbnM6IG5hbWVzcGFjZVxuICAgICAgICB9KTtcbiAgICAgICAgX3RoaXM0Lm9wdGlvbnMucmVxdWVzdChfdGhpczQub3B0aW9ucywgdXJsLCBwYXlsb2FkLCBmdW5jdGlvbiAoZGF0YSwgcmVzKSB7XG4gICAgICAgICAgZmluaXNoZWQgKz0gMTtcbiAgICAgICAgICBkYXRhQXJyYXkucHVzaChkYXRhKTtcbiAgICAgICAgICByZXNBcnJheS5wdXNoKHJlcyk7XG4gICAgICAgICAgaWYgKGZpbmlzaGVkID09PSBsYW5ndWFnZXMubGVuZ3RoKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIGNhbGxiYWNrID09PSAnZnVuY3Rpb24nKSBjYWxsYmFjayhkYXRhQXJyYXksIHJlc0FycmF5KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInJlbG9hZFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZWxvYWQoKSB7XG4gICAgICB2YXIgX3RoaXM1ID0gdGhpcztcbiAgICAgIHZhciBfdGhpcyRzZXJ2aWNlcyA9IHRoaXMuc2VydmljZXMsXG4gICAgICAgIGJhY2tlbmRDb25uZWN0b3IgPSBfdGhpcyRzZXJ2aWNlcy5iYWNrZW5kQ29ubmVjdG9yLFxuICAgICAgICBsYW5ndWFnZVV0aWxzID0gX3RoaXMkc2VydmljZXMubGFuZ3VhZ2VVdGlscyxcbiAgICAgICAgbG9nZ2VyID0gX3RoaXMkc2VydmljZXMubG9nZ2VyO1xuICAgICAgdmFyIGN1cnJlbnRMYW5ndWFnZSA9IGJhY2tlbmRDb25uZWN0b3IubGFuZ3VhZ2U7XG4gICAgICBpZiAoY3VycmVudExhbmd1YWdlICYmIGN1cnJlbnRMYW5ndWFnZS50b0xvd2VyQ2FzZSgpID09PSAnY2ltb2RlJykgcmV0dXJuO1xuICAgICAgdmFyIHRvTG9hZCA9IFtdO1xuICAgICAgdmFyIGFwcGVuZCA9IGZ1bmN0aW9uIGFwcGVuZChsbmcpIHtcbiAgICAgICAgdmFyIGxuZ3MgPSBsYW5ndWFnZVV0aWxzLnRvUmVzb2x2ZUhpZXJhcmNoeShsbmcpO1xuICAgICAgICBsbmdzLmZvckVhY2goZnVuY3Rpb24gKGwpIHtcbiAgICAgICAgICBpZiAodG9Mb2FkLmluZGV4T2YobCkgPCAwKSB0b0xvYWQucHVzaChsKTtcbiAgICAgICAgfSk7XG4gICAgICB9O1xuICAgICAgYXBwZW5kKGN1cnJlbnRMYW5ndWFnZSk7XG4gICAgICBpZiAodGhpcy5hbGxPcHRpb25zLnByZWxvYWQpIHRoaXMuYWxsT3B0aW9ucy5wcmVsb2FkLmZvckVhY2goZnVuY3Rpb24gKGwpIHtcbiAgICAgICAgcmV0dXJuIGFwcGVuZChsKTtcbiAgICAgIH0pO1xuICAgICAgdG9Mb2FkLmZvckVhY2goZnVuY3Rpb24gKGxuZykge1xuICAgICAgICBfdGhpczUuYWxsT3B0aW9ucy5ucy5mb3JFYWNoKGZ1bmN0aW9uIChucykge1xuICAgICAgICAgIGJhY2tlbmRDb25uZWN0b3IucmVhZChsbmcsIG5zLCAncmVhZCcsIG51bGwsIG51bGwsIGZ1bmN0aW9uIChlcnIsIGRhdGEpIHtcbiAgICAgICAgICAgIGlmIChlcnIpIGxvZ2dlci53YXJuKFwibG9hZGluZyBuYW1lc3BhY2UgXCIuY29uY2F0KG5zLCBcIiBmb3IgbGFuZ3VhZ2UgXCIpLmNvbmNhdChsbmcsIFwiIGZhaWxlZFwiKSwgZXJyKTtcbiAgICAgICAgICAgIGlmICghZXJyICYmIGRhdGEpIGxvZ2dlci5sb2coXCJsb2FkZWQgbmFtZXNwYWNlIFwiLmNvbmNhdChucywgXCIgZm9yIGxhbmd1YWdlIFwiKS5jb25jYXQobG5nKSwgZGF0YSk7XG4gICAgICAgICAgICBiYWNrZW5kQ29ubmVjdG9yLmxvYWRlZChcIlwiLmNvbmNhdChsbmcsIFwifFwiKS5jb25jYXQobnMpLCBlcnIsIGRhdGEpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfV0pO1xuICByZXR1cm4gQmFja2VuZDtcbn0oKTtcbkJhY2tlbmQudHlwZSA9ICdiYWNrZW5kJztcbmV4cG9ydCBkZWZhdWx0IEJhY2tlbmQ7Il0sIm5hbWVzIjpbIl90eXBlb2YiLCJvIiwiU3ltYm9sIiwiaXRlcmF0b3IiLCJjb25zdHJ1Y3RvciIsInByb3RvdHlwZSIsIm93bktleXMiLCJlIiwiciIsInQiLCJPYmplY3QiLCJrZXlzIiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwiZmlsdGVyIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiZW51bWVyYWJsZSIsInB1c2giLCJhcHBseSIsIl9vYmplY3RTcHJlYWQiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJmb3JFYWNoIiwiX2RlZmluZVByb3BlcnR5IiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyIsImRlZmluZVByb3BlcnRpZXMiLCJkZWZpbmVQcm9wZXJ0eSIsIl9jbGFzc0NhbGxDaGVjayIsImluc3RhbmNlIiwiQ29uc3RydWN0b3IiLCJUeXBlRXJyb3IiLCJfZGVmaW5lUHJvcGVydGllcyIsInRhcmdldCIsInByb3BzIiwiaSIsImRlc2NyaXB0b3IiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsIl90b1Byb3BlcnR5S2V5Iiwia2V5IiwiX2NyZWF0ZUNsYXNzIiwicHJvdG9Qcm9wcyIsInN0YXRpY1Byb3BzIiwib2JqIiwidmFsdWUiLCJfdG9QcmltaXRpdmUiLCJTdHJpbmciLCJ0b1ByaW1pdGl2ZSIsImNhbGwiLCJOdW1iZXIiLCJtYWtlUHJvbWlzZSIsInJlcXVlc3QiLCJnZXREZWZhdWx0cyIsImxvYWRQYXRoIiwiYWRkUGF0aCIsInBhcnNlIiwiZGF0YSIsIkpTT04iLCJzdHJpbmdpZnkiLCJwYXJzZVBheWxvYWQiLCJuYW1lc3BhY2UiLCJmYWxsYmFja1ZhbHVlIiwicGFyc2VMb2FkUGF5bG9hZCIsImxhbmd1YWdlcyIsIm5hbWVzcGFjZXMiLCJ1bmRlZmluZWQiLCJyZWxvYWRJbnRlcnZhbCIsImN1c3RvbUhlYWRlcnMiLCJxdWVyeVN0cmluZ1BhcmFtcyIsImNyb3NzRG9tYWluIiwid2l0aENyZWRlbnRpYWxzIiwib3ZlcnJpZGVNaW1lVHlwZSIsInJlcXVlc3RPcHRpb25zIiwibW9kZSIsImNyZWRlbnRpYWxzIiwiY2FjaGUiLCJCYWNrZW5kIiwic2VydmljZXMiLCJvcHRpb25zIiwiYWxsT3B0aW9ucyIsInR5cGUiLCJpbml0IiwiX3RoaXMiLCJzZXRJbnRlcnZhbCIsInJlbG9hZCIsInJlYWRNdWx0aSIsImNhbGxiYWNrIiwiX3JlYWRBbnkiLCJyZWFkIiwibGFuZ3VhZ2UiLCJsb2FkVXJsTGFuZ3VhZ2VzIiwibG9hZFVybE5hbWVzcGFjZXMiLCJfdGhpczIiLCJ0aGVuIiwicmVzb2x2ZWRMb2FkUGF0aCIsInVybCIsImludGVycG9sYXRvciIsImludGVycG9sYXRlIiwibG5nIiwiam9pbiIsIm5zIiwibG9hZFVybCIsIl90aGlzMyIsInBheWxvYWQiLCJlcnIiLCJyZXMiLCJzdGF0dXMiLCJtZXNzYWdlIiwiaW5kZXhPZiIsInJldCIsInBhcnNlRXJyIiwiY3JlYXRlIiwiX3RoaXM0IiwiZmluaXNoZWQiLCJkYXRhQXJyYXkiLCJyZXNBcnJheSIsIl90aGlzNSIsIl90aGlzJHNlcnZpY2VzIiwiYmFja2VuZENvbm5lY3RvciIsImxhbmd1YWdlVXRpbHMiLCJsb2dnZXIiLCJjdXJyZW50TGFuZ3VhZ2UiLCJ0b0xvd2VyQ2FzZSIsInRvTG9hZCIsImFwcGVuZCIsImxuZ3MiLCJ0b1Jlc29sdmVIaWVyYXJjaHkiLCJsIiwicHJlbG9hZCIsIndhcm4iLCJjb25jYXQiLCJsb2ciLCJsb2FkZWQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/i18next-http-backend/esm/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/i18next-http-backend/esm/request.js":
/*!**********************************************************!*\
  !*** ./node_modules/i18next-http-backend/esm/request.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("var _getFetch_cjs__WEBPACK_IMPORTED_MODULE_1___namespace_cache;\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils.js */ \"(ssr)/./node_modules/i18next-http-backend/esm/utils.js\");\n/* harmony import */ var _getFetch_cjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./getFetch.cjs */ \"(ssr)/./node_modules/i18next-http-backend/esm/getFetch.cjs\");\nfunction ownKeys(e, r) {\n    var t = Object.keys(e);\n    if (Object.getOwnPropertySymbols) {\n        var o = Object.getOwnPropertySymbols(e);\n        r && (o = o.filter(function(r) {\n            return Object.getOwnPropertyDescriptor(e, r).enumerable;\n        })), t.push.apply(t, o);\n    }\n    return t;\n}\nfunction _objectSpread(e) {\n    for(var r = 1; r < arguments.length; r++){\n        var t = null != arguments[r] ? arguments[r] : {};\n        r % 2 ? ownKeys(Object(t), !0).forEach(function(r) {\n            _defineProperty(e, r, t[r]);\n        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function(r) {\n            Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));\n        });\n    }\n    return e;\n}\nfunction _defineProperty(obj, key, value) {\n    key = _toPropertyKey(key);\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nfunction _toPropertyKey(t) {\n    var i = _toPrimitive(t, \"string\");\n    return \"symbol\" == _typeof(i) ? i : String(i);\n}\nfunction _toPrimitive(t, r) {\n    if (\"object\" != _typeof(t) || !t) return t;\n    var e = t[Symbol.toPrimitive];\n    if (void 0 !== e) {\n        var i = e.call(t, r || \"default\");\n        if (\"object\" != _typeof(i)) return i;\n        throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n    }\n    return (\"string\" === r ? String : Number)(t);\n}\nfunction _typeof(o) {\n    \"@babel/helpers - typeof\";\n    return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function(o) {\n        return typeof o;\n    } : function(o) {\n        return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o;\n    }, _typeof(o);\n}\n\n\nvar fetchApi;\nif (typeof fetch === \"function\") {\n    if (typeof global !== \"undefined\" && global.fetch) {\n        fetchApi = global.fetch;\n    } else if (false) {} else {\n        fetchApi = fetch;\n    }\n}\nvar XmlHttpRequestApi;\nif ((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.hasXMLHttpRequest)()) {\n    if (typeof global !== \"undefined\" && global.XMLHttpRequest) {\n        XmlHttpRequestApi = global.XMLHttpRequest;\n    } else if (false) {}\n}\nvar ActiveXObjectApi;\nif (typeof ActiveXObject === \"function\") {\n    if (typeof global !== \"undefined\" && global.ActiveXObject) {\n        ActiveXObjectApi = global.ActiveXObject;\n    } else if (false) {}\n}\nif (!fetchApi && /*#__PURE__*/ (_getFetch_cjs__WEBPACK_IMPORTED_MODULE_1___namespace_cache || (_getFetch_cjs__WEBPACK_IMPORTED_MODULE_1___namespace_cache = __webpack_require__.t(_getFetch_cjs__WEBPACK_IMPORTED_MODULE_1__, 2))) && !XmlHttpRequestApi && !ActiveXObjectApi) fetchApi = _getFetch_cjs__WEBPACK_IMPORTED_MODULE_1__ || /*#__PURE__*/ (_getFetch_cjs__WEBPACK_IMPORTED_MODULE_1___namespace_cache || (_getFetch_cjs__WEBPACK_IMPORTED_MODULE_1___namespace_cache = __webpack_require__.t(_getFetch_cjs__WEBPACK_IMPORTED_MODULE_1__, 2)));\nif (typeof fetchApi !== \"function\") fetchApi = undefined;\nvar addQueryString = function addQueryString(url, params) {\n    if (params && _typeof(params) === \"object\") {\n        var queryString = \"\";\n        for(var paramName in params){\n            queryString += \"&\" + encodeURIComponent(paramName) + \"=\" + encodeURIComponent(params[paramName]);\n        }\n        if (!queryString) return url;\n        url = url + (url.indexOf(\"?\") !== -1 ? \"&\" : \"?\") + queryString.slice(1);\n    }\n    return url;\n};\nvar fetchIt = function fetchIt(url, fetchOptions, callback, altFetch) {\n    var resolver = function resolver(response) {\n        if (!response.ok) return callback(response.statusText || \"Error\", {\n            status: response.status\n        });\n        response.text().then(function(data) {\n            callback(null, {\n                status: response.status,\n                data: data\n            });\n        }).catch(callback);\n    };\n    if (altFetch) {\n        var altResponse = altFetch(url, fetchOptions);\n        if (altResponse instanceof Promise) {\n            altResponse.then(resolver).catch(callback);\n            return;\n        }\n    }\n    if (typeof fetch === \"function\") {\n        fetch(url, fetchOptions).then(resolver).catch(callback);\n    } else {\n        fetchApi(url, fetchOptions).then(resolver).catch(callback);\n    }\n};\nvar omitFetchOptions = false;\nvar requestWithFetch = function requestWithFetch(options, url, payload, callback) {\n    if (options.queryStringParams) {\n        url = addQueryString(url, options.queryStringParams);\n    }\n    var headers = _objectSpread({}, typeof options.customHeaders === \"function\" ? options.customHeaders() : options.customHeaders);\n    if ( true && typeof global !== \"undefined\" && typeof global.process !== \"undefined\" && global.process.versions && global.process.versions.node) {\n        headers[\"User-Agent\"] = \"i18next-http-backend (node/\".concat(global.process.version, \"; \").concat(global.process.platform, \" \").concat(global.process.arch, \")\");\n    }\n    if (payload) headers[\"Content-Type\"] = \"application/json\";\n    var reqOptions = typeof options.requestOptions === \"function\" ? options.requestOptions(payload) : options.requestOptions;\n    var fetchOptions = _objectSpread({\n        method: payload ? \"POST\" : \"GET\",\n        body: payload ? options.stringify(payload) : undefined,\n        headers: headers\n    }, omitFetchOptions ? {} : reqOptions);\n    var altFetch = typeof options.alternateFetch === \"function\" && options.alternateFetch.length >= 1 ? options.alternateFetch : undefined;\n    try {\n        fetchIt(url, fetchOptions, callback, altFetch);\n    } catch (e) {\n        if (!reqOptions || Object.keys(reqOptions).length === 0 || !e.message || e.message.indexOf(\"not implemented\") < 0) {\n            return callback(e);\n        }\n        try {\n            Object.keys(reqOptions).forEach(function(opt) {\n                delete fetchOptions[opt];\n            });\n            fetchIt(url, fetchOptions, callback, altFetch);\n            omitFetchOptions = true;\n        } catch (err) {\n            callback(err);\n        }\n    }\n};\nvar requestWithXmlHttpRequest = function requestWithXmlHttpRequest(options, url, payload, callback) {\n    if (payload && _typeof(payload) === \"object\") {\n        payload = addQueryString(\"\", payload).slice(1);\n    }\n    if (options.queryStringParams) {\n        url = addQueryString(url, options.queryStringParams);\n    }\n    try {\n        var x;\n        if (XmlHttpRequestApi) {\n            x = new XmlHttpRequestApi();\n        } else {\n            x = new ActiveXObjectApi(\"MSXML2.XMLHTTP.3.0\");\n        }\n        x.open(payload ? \"POST\" : \"GET\", url, 1);\n        if (!options.crossDomain) {\n            x.setRequestHeader(\"X-Requested-With\", \"XMLHttpRequest\");\n        }\n        x.withCredentials = !!options.withCredentials;\n        if (payload) {\n            x.setRequestHeader(\"Content-Type\", \"application/x-www-form-urlencoded\");\n        }\n        if (x.overrideMimeType) {\n            x.overrideMimeType(\"application/json\");\n        }\n        var h = options.customHeaders;\n        h = typeof h === \"function\" ? h() : h;\n        if (h) {\n            for(var i in h){\n                x.setRequestHeader(i, h[i]);\n            }\n        }\n        x.onreadystatechange = function() {\n            x.readyState > 3 && callback(x.status >= 400 ? x.statusText : null, {\n                status: x.status,\n                data: x.responseText\n            });\n        };\n        x.send(payload);\n    } catch (e) {\n        console && console.log(e);\n    }\n};\nvar request = function request(options, url, payload, callback) {\n    if (typeof payload === \"function\") {\n        callback = payload;\n        payload = undefined;\n    }\n    callback = callback || function() {};\n    if (fetchApi && url.indexOf(\"file:\") !== 0) {\n        return requestWithFetch(options, url, payload, callback);\n    }\n    if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.hasXMLHttpRequest)() || typeof ActiveXObject === \"function\") {\n        return requestWithXmlHttpRequest(options, url, payload, callback);\n    }\n    callback(new Error(\"No fetch and no xhr implementation found!\"));\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (request);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/i18next-http-backend/esm/request.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/i18next-http-backend/esm/utils.js":
/*!********************************************************!*\
  !*** ./node_modules/i18next-http-backend/esm/utils.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   defaults: () => (/* binding */ defaults),\n/* harmony export */   hasXMLHttpRequest: () => (/* binding */ hasXMLHttpRequest),\n/* harmony export */   makePromise: () => (/* binding */ makePromise)\n/* harmony export */ });\nfunction _typeof(o) {\n    \"@babel/helpers - typeof\";\n    return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function(o) {\n        return typeof o;\n    } : function(o) {\n        return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o;\n    }, _typeof(o);\n}\nvar arr = [];\nvar each = arr.forEach;\nvar slice = arr.slice;\nfunction defaults(obj) {\n    each.call(slice.call(arguments, 1), function(source) {\n        if (source) {\n            for(var prop in source){\n                if (obj[prop] === undefined) obj[prop] = source[prop];\n            }\n        }\n    });\n    return obj;\n}\nfunction hasXMLHttpRequest() {\n    return typeof XMLHttpRequest === \"function\" || (typeof XMLHttpRequest === \"undefined\" ? \"undefined\" : _typeof(XMLHttpRequest)) === \"object\";\n}\nfunction isPromise(maybePromise) {\n    return !!maybePromise && typeof maybePromise.then === \"function\";\n}\nfunction makePromise(maybePromise) {\n    if (isPromise(maybePromise)) {\n        return maybePromise;\n    }\n    return Promise.resolve(maybePromise);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvaTE4bmV4dC1odHRwLWJhY2tlbmQvZXNtL3V0aWxzLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLFNBQVNBLFFBQVFDLENBQUM7SUFBSTtJQUEyQixPQUFPRCxVQUFVLGNBQWMsT0FBT0UsVUFBVSxZQUFZLE9BQU9BLE9BQU9DLFFBQVEsR0FBRyxTQUFVRixDQUFDO1FBQUksT0FBTyxPQUFPQTtJQUFHLElBQUksU0FBVUEsQ0FBQztRQUFJLE9BQU9BLEtBQUssY0FBYyxPQUFPQyxVQUFVRCxFQUFFRyxXQUFXLEtBQUtGLFVBQVVELE1BQU1DLE9BQU9HLFNBQVMsR0FBRyxXQUFXLE9BQU9KO0lBQUcsR0FBR0QsUUFBUUM7QUFBSTtBQUM3VCxJQUFJSyxNQUFNLEVBQUU7QUFDWixJQUFJQyxPQUFPRCxJQUFJRSxPQUFPO0FBQ3RCLElBQUlDLFFBQVFILElBQUlHLEtBQUs7QUFDZCxTQUFTQyxTQUFTQyxHQUFHO0lBQzFCSixLQUFLSyxJQUFJLENBQUNILE1BQU1HLElBQUksQ0FBQ0MsV0FBVyxJQUFJLFNBQVVDLE1BQU07UUFDbEQsSUFBSUEsUUFBUTtZQUNWLElBQUssSUFBSUMsUUFBUUQsT0FBUTtnQkFDdkIsSUFBSUgsR0FBRyxDQUFDSSxLQUFLLEtBQUtDLFdBQVdMLEdBQUcsQ0FBQ0ksS0FBSyxHQUFHRCxNQUFNLENBQUNDLEtBQUs7WUFDdkQ7UUFDRjtJQUNGO0lBQ0EsT0FBT0o7QUFDVDtBQUNPLFNBQVNNO0lBQ2QsT0FBTyxPQUFPQyxtQkFBbUIsY0FBYyxDQUFDLE9BQU9BLG1CQUFtQixjQUFjLGNBQWNsQixRQUFRa0IsZUFBYyxNQUFPO0FBQ3JJO0FBQ0EsU0FBU0MsVUFBVUMsWUFBWTtJQUM3QixPQUFPLENBQUMsQ0FBQ0EsZ0JBQWdCLE9BQU9BLGFBQWFDLElBQUksS0FBSztBQUN4RDtBQUNPLFNBQVNDLFlBQVlGLFlBQVk7SUFDdEMsSUFBSUQsVUFBVUMsZUFBZTtRQUMzQixPQUFPQTtJQUNUO0lBQ0EsT0FBT0csUUFBUUMsT0FBTyxDQUFDSjtBQUN6QiIsInNvdXJjZXMiOlsid2VicGFjazovL0BjaGFyZ2Vib3Qvd2ViLy4vbm9kZV9tb2R1bGVzL2kxOG5leHQtaHR0cC1iYWNrZW5kL2VzbS91dGlscy5qcz9hMWQ4Il0sInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIF90eXBlb2YobykgeyBcIkBiYWJlbC9oZWxwZXJzIC0gdHlwZW9mXCI7IHJldHVybiBfdHlwZW9mID0gXCJmdW5jdGlvblwiID09IHR5cGVvZiBTeW1ib2wgJiYgXCJzeW1ib2xcIiA9PSB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID8gZnVuY3Rpb24gKG8pIHsgcmV0dXJuIHR5cGVvZiBvOyB9IDogZnVuY3Rpb24gKG8pIHsgcmV0dXJuIG8gJiYgXCJmdW5jdGlvblwiID09IHR5cGVvZiBTeW1ib2wgJiYgby5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG8gIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG87IH0sIF90eXBlb2Yobyk7IH1cbnZhciBhcnIgPSBbXTtcbnZhciBlYWNoID0gYXJyLmZvckVhY2g7XG52YXIgc2xpY2UgPSBhcnIuc2xpY2U7XG5leHBvcnQgZnVuY3Rpb24gZGVmYXVsdHMob2JqKSB7XG4gIGVhY2guY2FsbChzbGljZS5jYWxsKGFyZ3VtZW50cywgMSksIGZ1bmN0aW9uIChzb3VyY2UpIHtcbiAgICBpZiAoc291cmNlKSB7XG4gICAgICBmb3IgKHZhciBwcm9wIGluIHNvdXJjZSkge1xuICAgICAgICBpZiAob2JqW3Byb3BdID09PSB1bmRlZmluZWQpIG9ialtwcm9wXSA9IHNvdXJjZVtwcm9wXTtcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xuICByZXR1cm4gb2JqO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGhhc1hNTEh0dHBSZXF1ZXN0KCkge1xuICByZXR1cm4gdHlwZW9mIFhNTEh0dHBSZXF1ZXN0ID09PSAnZnVuY3Rpb24nIHx8ICh0eXBlb2YgWE1MSHR0cFJlcXVlc3QgPT09IFwidW5kZWZpbmVkXCIgPyBcInVuZGVmaW5lZFwiIDogX3R5cGVvZihYTUxIdHRwUmVxdWVzdCkpID09PSAnb2JqZWN0Jztcbn1cbmZ1bmN0aW9uIGlzUHJvbWlzZShtYXliZVByb21pc2UpIHtcbiAgcmV0dXJuICEhbWF5YmVQcm9taXNlICYmIHR5cGVvZiBtYXliZVByb21pc2UudGhlbiA9PT0gJ2Z1bmN0aW9uJztcbn1cbmV4cG9ydCBmdW5jdGlvbiBtYWtlUHJvbWlzZShtYXliZVByb21pc2UpIHtcbiAgaWYgKGlzUHJvbWlzZShtYXliZVByb21pc2UpKSB7XG4gICAgcmV0dXJuIG1heWJlUHJvbWlzZTtcbiAgfVxuICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKG1heWJlUHJvbWlzZSk7XG59Il0sIm5hbWVzIjpbIl90eXBlb2YiLCJvIiwiU3ltYm9sIiwiaXRlcmF0b3IiLCJjb25zdHJ1Y3RvciIsInByb3RvdHlwZSIsImFyciIsImVhY2giLCJmb3JFYWNoIiwic2xpY2UiLCJkZWZhdWx0cyIsIm9iaiIsImNhbGwiLCJhcmd1bWVudHMiLCJzb3VyY2UiLCJwcm9wIiwidW5kZWZpbmVkIiwiaGFzWE1MSHR0cFJlcXVlc3QiLCJYTUxIdHRwUmVxdWVzdCIsImlzUHJvbWlzZSIsIm1heWJlUHJvbWlzZSIsInRoZW4iLCJtYWtlUHJvbWlzZSIsIlByb21pc2UiLCJyZXNvbHZlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/i18next-http-backend/esm/utils.js\n");

/***/ })

};
;