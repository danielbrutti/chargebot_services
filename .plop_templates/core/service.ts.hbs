export * as {{pascalCase name}} from "./{{snakeCase name}}";
import db{{#if relationships}}, { Database{{#any attributes 'type' 'eq' 'json'}}, json{{/any}} }{{/if}} from '../database';
{{#if relationships}}
import { ExpressionBuilder } from "kysely";
import { jsonObjectFrom } from 'kysely/helpers/postgres'
{{/if}}
import { {{pascalCase name}}, {{pascalCase name}}Update, New{{pascalCase name}} } from "../database/{{snakeCase name}}";

{{#each relationships}}
  {{#when relation_type 'eq' 'many-to-one'}}
function with{{pascalCase entity}}(eb: ExpressionBuilder<Database, '{{snakeCase ../name}}'>) {
    return jsonObjectFrom(
      eb.selectFrom('{{snakeCase entity}}')
        .selectAll()
        .whereRef('{{snakeCase entity}}.id', '=', '{{snakeCase ../name}}.{{snakeCase entity}}_id')
    ).as('{{snakeCase entity}}')
}

  {{/when}}
  {{#when relation_type 'eq' 'many-to-many'}}
function with{{pascalCase first_entity}}(eb: ExpressionBuilder<Database, '{{snakeCase ../name}}'>) {
    return jsonObjectFrom(
      eb.selectFrom('{{snakeCase first_entity}}')
        .selectAll()
        .whereRef('{{snakeCase first_entity}}.id', '=', '{{snakeCase ../name}}.{{snakeCase first_entity}}_id')
    ).as('{{snakeCase first_entity}}')
}

function with{{pascalCase second_entity}}(eb: ExpressionBuilder<Database, '{{snakeCase ../name}}'>) {
    return jsonObjectFrom(
      eb.selectFrom('{{snakeCase second_entity}}')
        .selectAll()
        .whereRef('{{snakeCase second_entity}}.id', '=', '{{snakeCase ../name}}.{{snakeCase second_entity}}_id')
    ).as('{{snakeCase second_entity}}')
}

  {{/when}}
{{/each}}

export async function create({{snakeCase name}}: New{{pascalCase name}}): Promise<{
  entity: {{pascalCase name}} | undefined,
  event: unknown
} | undefined> {
    {{#any attributes 'unique' 'eq' true}}
    const exists = await db
        .selectFrom('{{snakeCase name}}')
        .select(['id'])
        .where((eb) => eb.or([
        {{#each attributes}}
            {{#if unique}}
            eb('{{snakeCase attribute}}', '=', {{snakeCase ../name}}.{{snakeCase attribute}}),
            {{/if}}
        {{/each}}
        ]))
        .where('deleted_by', 'is', null)
        .executeTakeFirst();
    if (exists) {
        throw Error('Entity already exists with unique values');
    }
    {{/any}}
    {{#each relationships}}
      {{#when relation_type 'eq' 'many-to-many'}}
    // check if many-to-many record already exists
    const existent = await db
          .selectFrom("{{snakeCase ../name}}")
          .selectAll()
          .where('{{snakeCase first_entity}}_id', '=', {{snakeCase ../name}}.{{snakeCase first_entity}}_id)
          .where('{{snakeCase second_entity}}_id', '=', {{snakeCase ../name}}.{{snakeCase second_entity}}_id)
          .where('deleted_by', 'is', null)
          .executeTakeFirst();
    if (existent) {
        // return existent many-to-many record, do not create a new one
        return {
          entity: existent,
          // event to dispatch on EventBus on creation
          // undefined when entity already exists
          event: undefined
        };
    }
      {{/when}}
    {{/each}}
    const created = await db
        .insertInto('{{snakeCase name}}')
        .values({
            ...{{snakeCase name}},
            {{#each attributes}}
                {{#when type 'eq' 'json'}}
            {{snakeCase attribute}}: json({{snakeCase ../name}}.{{snakeCase attribute}}),
                {{/when}}
            {{/each}}
        })
        .returningAll()
        .executeTakeFirst();
    
    if (!created) {
      return undefined;
    }

    return {
      entity: created,
      // event to dispatch on EventBus on creation
      // undefined as default to not dispatch any event
      event: undefined
    };
}

export async function update(id: number, {{snakeCase name}}: {{pascalCase name}}Update): Promise<{{pascalCase name}} | undefined> {
    return await db
        .updateTable('{{snakeCase name}}')
        .set({{snakeCase name}})
        .where('id', '=', id)
        .where('deleted_by', 'is', null)
        .returningAll()
        .executeTakeFirst();
}

export async function remove(id: number, user_id: string): Promise<{ id: number | undefined } | undefined> {
    return await db
        .updateTable('{{snakeCase name}}')
        .set({ deleted_date: new Date(), deleted_by: user_id })
        .where('id', '=', id)
        .where('deleted_by', 'is', null)
        .returning(['id'])
        .executeTakeFirst();
}

export async function hard_remove(id: number): Promise<void> {
    await db
        .deleteFrom('{{snakeCase name}}')
        .where('id', '=', id)
        .executeTakeFirst();
}

export async function list(): Promise<{{pascalCase name}}[]> {
    return await db
        .selectFrom("{{snakeCase name}}")
        .selectAll()
        .where('deleted_by', 'is', null)
        .execute();
}

export async function get(id: number): Promise<{{pascalCase name}} | undefined> {
    return await db
        .selectFrom("{{snakeCase name}}")
        .selectAll()
        {{#each relationships}}
          {{#when relation_type 'eq' 'many-to-one'}}
            {{#if eager}}
        .select((eb) => with{{pascalCase entity}}(eb))
            {{else}}
        // uncoment to enable eager loading
        //.select((eb) => with{{pascalCase entity}}(eb))
            {{/if}}
          {{/when}}
          {{#when relation_type 'eq' 'many-to-many'}}
            {{#if eager}}
        .select((eb) => with{{pascalCase first_entity}}(eb))
        .select((eb) => with{{pascalCase second_entity}}(eb))
            {{else}}
        // uncoment to enable eager loading
        // .select((eb) => with{{pascalCase first_entity}}(eb))
        // .select((eb) => with{{pascalCase second_entity}}(eb))
            {{/if}}
          {{/when}}
        {{/each}}
        .where('id', '=', id)
        .where('deleted_by', 'is', null)
        .executeTakeFirst();
}

export async function findByCriteria(criteria: Partial<{{pascalCase name}}>): Promise<{{pascalCase name}}[]> {
  const query = buildCriteriaQuery(criteria);

  return await query
    .selectAll()
    {{#each relationships}}
      {{#when relation_type 'eq' 'many-to-one'}}
        {{#if eager}}
    .select((eb) => with{{pascalCase entity}}(eb))
        {{else}}
    // uncoment to enable eager loading
    //.select((eb) => with{{pascalCase entity}}(eb))
        {{/if}}
      {{/when}}
      {{#when relation_type 'eq' 'many-to-many'}}
        {{#if eager}}
    .select((eb) => with{{pascalCase first_entity}}(eb))
    .select((eb) => with{{pascalCase second_entity}}(eb))
        {{else}}
    // uncoment to enable eager loading
    // .select((eb) => with{{pascalCase first_entity}}(eb))
    // .select((eb) => with{{pascalCase second_entity}}(eb))
        {{/if}}
      {{/when}}
    {{/each}}
    .execute();
}

export async function findOneByCriteria(criteria: Partial<{{pascalCase name}}>): Promise<{{pascalCase name}} | undefined> {
  const query = buildCriteriaQuery(criteria);

  return await query
    .selectAll()
    {{#each relationships}}
      {{#when relation_type 'eq' 'many-to-one'}}
        {{#if eager}}
    .select((eb) => with{{pascalCase entity}}(eb))
        {{else}}
    // uncoment to enable eager loading
    //.select((eb) => with{{pascalCase entity}}(eb))
        {{/if}}
      {{/when}}
      {{#when relation_type 'eq' 'many-to-many'}}
        {{#if eager}}
    .select((eb) => with{{pascalCase first_entity}}(eb))
    .select((eb) => with{{pascalCase second_entity}}(eb))
        {{else}}
    // uncoment to enable eager loading
    // .select((eb) => with{{pascalCase first_entity}}(eb))
    // .select((eb) => with{{pascalCase second_entity}}(eb))
        {{/if}}
      {{/when}}
    {{/each}}
    .limit(1)
    .executeTakeFirst();
}

function buildCriteriaQuery(criteria: Partial<{{pascalCase name}}>) {
  let query = db.selectFrom('{{snakeCase name}}').where('deleted_by', 'is', null);

  if (criteria.id) {
    query = query.where('id', '=', criteria.id);
  }

{{#each attributes}}
  {{#when tsType 'eq' 'string'}}
  if (criteria.{{snakeCase attribute}} !== undefined) {
    query = query.where(
      '{{snakeCase attribute}}', 
      criteria.{{snakeCase attribute}} === null ? 'is' : '=', 
      criteria.{{snakeCase attribute}}
    );
  }
  {{/when}}
  {{#when tsType 'neq' 'string'}}
  if (criteria.{{snakeCase attribute}}) {
    query = query.where('{{snakeCase attribute}}', '=', criteria.{{snakeCase attribute}});
  }
  {{/when}}
{{/each}}

{{#each relationships}}
  {{#when relation_type 'eq' 'many-to-one'}}
  if (criteria.{{snakeCase entity}}_id) {
    query = query.where('{{snakeCase entity}}_id', '=', criteria.{{snakeCase entity}}_id);
  }
  {{/when}}
  {{#when relation_type 'eq' 'many-to-many'}}
  if (criteria.{{snakeCase first_entity}}_id) {
    query = query.where('{{snakeCase first_entity}}_id', '=', criteria.{{snakeCase first_entity}}_id);
  }

  if (criteria.{{snakeCase second_entity}}_id) {
    query = query.where('{{snakeCase second_entity}}_id', '=', criteria.{{snakeCase second_entity}}_id);
  }
  {{/when}}
{{/each}}

  if (criteria.created_by) {
    query = query.where('created_by', '=', criteria.created_by);
  }

  if (criteria.modified_by !== undefined) {
    query = query.where(
      'modified_by', 
      criteria.modified_by === null ? 'is' : '=', 
      criteria.modified_by
    );
  }

  return query;
}
