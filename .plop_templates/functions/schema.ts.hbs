import Joi from 'joi';
import { AuditedEntityCreateSchemaDef, AuditedEntityUpdateSchemaDef, AuditedEntitySchemaDef, JsonResponseSchemaDef } from "../shared/schemas";
{{#each relationships}}
  {{#when relation_type 'eq' 'many-to-one'}}
    {{#if eager}}
import { EntitySchema as {{pascalCase entity}}Schema } from "./{{snakeCase entity}}.schema";
    {{else}}
// uncoment to enable eager loading
//import { EntitySchema as {{pascalCase entity}}Schema } from "./{{snakeCase entity}}.schema";
    {{/if}}
  {{/when}}
  {{#when relation_type 'eq' 'many-to-many'}}
    {{#if eager}}
import { EntitySchema as {{pascalCase first_entity}}Schema } from "./{{snakeCase first_entity}}.schema";
import { EntitySchema as {{pascalCase second_entity}}Schema } from "./{{snakeCase second_entity}}.schema";
    {{else}}
// uncoment to enable eager loading
//import { EntitySchema as {{pascalCase first_entity}}Schema } from "./{{snakeCase first_entity}}.schema";
//import { EntitySchema as {{pascalCase second_entity}}Schema } from "./{{snakeCase second_entity}}.schema";
    {{/if}}
  {{/when}}
{{/each}}

const {{pascalCase name}}SchemaDef = {
    {{#each attributes}}
    {{#when tsType 'eq' 'string'}}
    {{snakeCase attribute}}: Joi.string(){{#when varchar_length "gt" 0}}.max({{varchar_length}}){{/when}}{{#when not_null 'eq' false}}.allow(null){{/when}},
    {{/when}}
    {{#when tsType 'eq' 'number'}}
    {{snakeCase attribute}}: Joi.number(){{#when not_null 'eq' false}}.allow(null){{/when}},
    {{/when}}
    {{#when tsType 'eq' 'Date'}}
    {{snakeCase attribute}}: Joi.date(){{#when not_null 'eq' false}}.allow(null){{/when}},
    {{/when}}
    {{#when tsType 'eq' 'boolean'}}
    {{snakeCase attribute}}: Joi.boolean(){{#when not_null 'eq' false}}.allow(null){{/when}},
    {{/when}}
    {{/each}}
};

export const EntitySchema = Joi.object({
    ...AuditedEntitySchemaDef,
    ...{{pascalCase name}}SchemaDef,
    {{#each relationships}}
      {{#when relation_type 'eq' 'many-to-one'}}
        {{#if not_null}}
    {{snakeCase entity}}_id: Joi.number(),
        {{else}}
    {{snakeCase entity}}_id: Joi.number().allow(null),
        {{/if}}
      {{/when}}
      {{#when relation_type 'eq' 'many-to-many'}}
        {{#if not_null}}
    {{snakeCase first_entity}}_id: Joi.number(),
    {{snakeCase second_entity}}_id: Joi.number(),
        {{else}}
    {{snakeCase first_entity}}_id: Joi.number().allow(null),
    {{snakeCase second_entity}}_id: Joi.number().allow(null),
        {{/if}}
      {{/when}}
    {{/each}}
    {{#each relationships}}
      {{#when relation_type 'eq' 'many-to-one'}}
        {{#if eager}}
    {{snakeCase entity}}: {{pascalCase entity}}Schema,
        {{else}}
    // uncoment to enable eager loading
    //{{snakeCase entity}}: {{pascalCase entity}}Schema,
        {{/if}}
      {{/when}}
      {{#when relation_type 'eq' 'many-to-many'}}
        {{#if eager}}
    {{snakeCase first_entity}}: {{pascalCase first_entity}}Schema,
    {{snakeCase second_entity}}: {{pascalCase second_entity}}Schema,
        {{else}}
    // uncoment to enable eager loading
    //{{snakeCase first_entity}}: {{pascalCase first_entity}}Schema,
    //{{snakeCase second_entity}}: {{pascalCase second_entity}}Schema,
        {{/if}}
      {{/when}}
    {{/each}}
});

export const CreateSchema = Joi.object({
    ...AuditedEntityCreateSchemaDef,
    ...{{pascalCase name}}SchemaDef
}).keys({
    // overwrite keys for required attributes
    {{#each attributes}}
    {{#if not_null}}
        {{#when tsType 'eq' 'string'}}
    {{snakeCase attribute}}: Joi.string(){{#when varchar_length "gt" 0}}.max({{varchar_length}}){{/when}}.required(),
        {{/when}}
        {{#when tsType 'eq' 'number'}}
    {{snakeCase attribute}}: Joi.number().required(),
        {{/when}}
        {{#when tsType 'eq' 'Date'}}
    {{snakeCase attribute}}: Joi.date().required(),
        {{/when}}
        {{#when tsType 'eq' 'boolean'}}
    {{snakeCase attribute}}: Joi.boolean().required(),
        {{/when}}
    {{/if}}
    {{/each}}
    {{#each relationships}}
      {{#when relation_type 'eq' 'many-to-one'}}
        {{#if not_null}}
    {{snakeCase entity}}_id: Joi.number().required(),
        {{else}}
    {{snakeCase entity}}_id: Joi.number(),
        {{/if}}
      {{/when}}
      {{#when relation_type 'eq' 'many-to-many'}}
        {{#if not_null}}
    {{snakeCase first_entity}}_id: Joi.number().required(),
    {{snakeCase second_entity}}_id: Joi.number().required(),
        {{else}}
    {{snakeCase first_entity}}_id: Joi.number(),
    {{snakeCase second_entity}}_id: Joi.number(),
        {{/if}}
      {{/when}}
    {{/each}}
});

export const UpdateSchema = Joi.object({
    ...AuditedEntityUpdateSchemaDef,
    ...{{pascalCase name}}SchemaDef
});

export const SearchSchema = Joi.object({
    id: Joi.number(),
    {{#each relationships}}
      {{#when relation_type 'eq' 'many-to-one'}}
    {{snakeCase entity}}_id: Joi.number(),
      {{/when}}
      {{#when relation_type 'eq' 'many-to-many'}}
    {{snakeCase first_entity}}_id: Joi.number(),
    {{snakeCase second_entity}}_id: Joi.number(),
      {{/when}}
    {{/each}}
    ...{{pascalCase name}}SchemaDef
});

export const ResponseSchema = Joi.object({
    ...JsonResponseSchemaDef,
    body: EntitySchema
});

export const ArrayResponseSchema = Joi.object({
    ...JsonResponseSchemaDef,
    body: Joi.array().items(EntitySchema)
});