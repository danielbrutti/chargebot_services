"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/cssjanus";
exports.ids = ["vendor-chunks/cssjanus"];
exports.modules = {

/***/ "(ssr)/./node_modules/cssjanus/src/cssjanus.js":
/*!***********************************************!*\
  !*** ./node_modules/cssjanus/src/cssjanus.js ***!
  \***********************************************/
/***/ ((module, exports) => {

eval("/*!\n * CSSJanus. https://www.mediawiki.org/wiki/CSSJanus\n *\n * Copyright 2014 Trevor Parscal\n * Copyright 2010 Roan Kattouw\n * Copyright 2008 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ \nvar cssjanus;\n/**\n * Create a tokenizer object.\n *\n * This utility class is used by CSSJanus to protect strings by replacing them temporarily with\n * tokens and later transforming them back.\n *\n * @class\n * @constructor\n * @param {RegExp} regex Regular expression whose matches to replace by a token\n * @param {string} token Placeholder text\n */ function Tokenizer(regex, token) {\n    var matches = [], index = 0;\n    /**\n\t * Add a match.\n\t *\n\t * @private\n\t * @param {string} match Matched string\n\t * @return {string} Token to leave in the matched string's place\n\t */ function tokenizeCallback(match) {\n        matches.push(match);\n        return token;\n    }\n    /**\n\t * Get a match.\n\t *\n\t * @private\n\t * @return {string} Original matched string to restore\n\t */ function detokenizeCallback() {\n        return matches[index++];\n    }\n    return {\n        /**\n\t\t * Replace matching strings with tokens.\n\t\t *\n\t\t * @param {string} str String to tokenize\n\t\t * @return {string} Tokenized string\n\t\t */ tokenize: function(str) {\n            return str.replace(regex, tokenizeCallback);\n        },\n        /**\n\t\t * Restores tokens to their original values.\n\t\t *\n\t\t * @param {string} str String previously run through tokenize()\n\t\t * @return {string} Original string\n\t\t */ detokenize: function(str) {\n            return str.replace(new RegExp(\"(\" + token + \")\", \"g\"), detokenizeCallback);\n        }\n    };\n}\n/**\n * Create a CSSJanus object.\n *\n * CSSJanus transforms CSS rules with horizontal relevance so that a left-to-right stylesheet can\n * become a right-to-left stylesheet automatically. Processing can be bypassed for an entire rule\n * or a single property by adding a / * @noflip * / comment above the rule or property.\n *\n * @class\n * @constructor\n */ function CSSJanus() {\n    var // Tokens\n    temporaryToken = \"`TMP`\", noFlipSingleToken = \"`NOFLIP_SINGLE`\", noFlipClassToken = \"`NOFLIP_CLASS`\", commentToken = \"`COMMENT`\", // Patterns\n    nonAsciiPattern = \"[^\\\\u0020-\\\\u007e]\", unicodePattern = \"(?:(?:\\\\\\\\[0-9a-f]{1,6})(?:\\\\r\\\\n|\\\\s)?)\", numPattern = \"(?:[0-9]*\\\\.[0-9]+|[0-9]+)\", unitPattern = \"(?:em|ex|px|cm|mm|in|pt|pc|deg|rad|grad|ms|s|hz|khz|%)\", directionPattern = \"direction\\\\s*:\\\\s*\", urlSpecialCharsPattern = \"[!#$%&*-~]\", validAfterUriCharsPattern = \"['\\\"]?\\\\s*\", nonLetterPattern = \"(^|[^a-zA-Z])\", charsWithinSelectorPattern = \"[^\\\\}]*?\", noFlipPattern = \"\\\\/\\\\*\\\\!?\\\\s*@noflip\\\\s*\\\\*\\\\/\", commentPattern = \"\\\\/\\\\*[^*]*\\\\*+([^\\\\/*][^*]*\\\\*+)*\\\\/\", escapePattern = \"(?:\" + unicodePattern + \"|\\\\\\\\[^\\\\r\\\\n\\\\f0-9a-f])\", nmstartPattern = \"(?:[_a-z]|\" + nonAsciiPattern + \"|\" + escapePattern + \")\", nmcharPattern = \"(?:[_a-z0-9-]|\" + nonAsciiPattern + \"|\" + escapePattern + \")\", identPattern = \"-?\" + nmstartPattern + nmcharPattern + \"*\", quantPattern = numPattern + \"(?:\\\\s*\" + unitPattern + \"|\" + identPattern + \")?\", signedQuantPattern = \"((?:-?\" + quantPattern + \")|(?:inherit|auto))\", signedQuantSimplePattern = \"(?:-?\" + numPattern + \"(?:\\\\s*\" + unitPattern + \")?)\", mathOperatorsPattern = \"(?:\\\\+|\\\\-|\\\\*|\\\\/)\", allowedCharsPattern = \"(?:\\\\(|\\\\)|\\\\t| )\", calcEquationPattern = \"(?:\" + allowedCharsPattern + \"|\" + signedQuantSimplePattern + \"|\" + mathOperatorsPattern + \"){3,}\", calcPattern = \"(?:calc\\\\((?:\" + calcEquationPattern + \")\\\\))\", signedQuantCalcPattern = \"((?:-?\" + quantPattern + \")|(?:inherit|auto)|\" + calcPattern + \")\", fourNotationQuantPropsPattern = \"((?:margin|padding|border-width)\\\\s*:\\\\s*)\", fourNotationColorPropsPattern = \"((?:-color|border-style)\\\\s*:\\\\s*)\", colorPattern = \"(#?\" + nmcharPattern + \"+|(?:rgba?|hsla?)\\\\([ \\\\d.,%-]+\\\\))\", // The use of a lazy match (\"*?\") may cause a backtrack limit to be exceeded before finding\n    // the intended match. This affects 'urlCharsPattern' and 'lookAheadNotOpenBracePattern'.\n    // We have not yet found this problem on Node.js, but we have on PHP 7, where it was\n    // mitigated by using a possessive quantifier (\"*+\"), which are not supported in JS.\n    // See <https://phabricator.wikimedia.org/T215746#4944830>.\n    urlCharsPattern = \"(?:\" + urlSpecialCharsPattern + \"|\" + nonAsciiPattern + \"|\" + escapePattern + \")*?\", lookAheadNotLetterPattern = \"(?![a-zA-Z])\", lookAheadNotOpenBracePattern = \"(?!(\" + nmcharPattern + \"|\\\\r?\\\\n|\\\\s|#|\\\\:|\\\\.|\\\\,|\\\\+|>|~|\\\\(|\\\\)|\\\\[|\\\\]|=|\\\\*=|~=|\\\\^=|'[^']*'|\\\"[^\\\"]*\\\"|\" + commentToken + \")*?{)\", lookAheadNotClosingParenPattern = \"(?!\" + urlCharsPattern + validAfterUriCharsPattern + \"\\\\))\", lookAheadForClosingParenPattern = \"(?=\" + urlCharsPattern + validAfterUriCharsPattern + \"\\\\))\", suffixPattern = \"(\\\\s*(?:!important\\\\s*)?[;}])\", // Regular expressions\n    temporaryTokenRegExp = /`TMP`/g, commentRegExp = new RegExp(commentPattern, \"gi\"), noFlipSingleRegExp = new RegExp(\"(\" + noFlipPattern + lookAheadNotOpenBracePattern + \"[^;}]+;?)\", \"gi\"), noFlipClassRegExp = new RegExp(\"(\" + noFlipPattern + charsWithinSelectorPattern + \"})\", \"gi\"), directionLtrRegExp = new RegExp(\"(\" + directionPattern + \")ltr\", \"gi\"), directionRtlRegExp = new RegExp(\"(\" + directionPattern + \")rtl\", \"gi\"), leftRegExp = new RegExp(nonLetterPattern + \"(left)\" + lookAheadNotLetterPattern + lookAheadNotClosingParenPattern + lookAheadNotOpenBracePattern, \"gi\"), rightRegExp = new RegExp(nonLetterPattern + \"(right)\" + lookAheadNotLetterPattern + lookAheadNotClosingParenPattern + lookAheadNotOpenBracePattern, \"gi\"), leftInUrlRegExp = new RegExp(nonLetterPattern + \"(left)\" + lookAheadForClosingParenPattern, \"gi\"), rightInUrlRegExp = new RegExp(nonLetterPattern + \"(right)\" + lookAheadForClosingParenPattern, \"gi\"), ltrInUrlRegExp = new RegExp(nonLetterPattern + \"(ltr)\" + lookAheadForClosingParenPattern, \"gi\"), rtlInUrlRegExp = new RegExp(nonLetterPattern + \"(rtl)\" + lookAheadForClosingParenPattern, \"gi\"), cursorEastRegExp = new RegExp(nonLetterPattern + \"([ns]?)e-resize\", \"gi\"), cursorWestRegExp = new RegExp(nonLetterPattern + \"([ns]?)w-resize\", \"gi\"), fourNotationQuantRegExp = new RegExp(fourNotationQuantPropsPattern + signedQuantCalcPattern + \"(\\\\s+)\" + signedQuantCalcPattern + \"(\\\\s+)\" + signedQuantCalcPattern + \"(\\\\s+)\" + signedQuantCalcPattern + suffixPattern, \"gi\"), fourNotationColorRegExp = new RegExp(fourNotationColorPropsPattern + colorPattern + \"(\\\\s+)\" + colorPattern + \"(\\\\s+)\" + colorPattern + \"(\\\\s+)\" + colorPattern + suffixPattern, \"gi\"), bgHorizontalPercentageRegExp = new RegExp(\"(background(?:-position)?\\\\s*:\\\\s*(?:[^:;}\\\\s]+\\\\s+)*?)(\" + quantPattern + \")\", \"gi\"), bgHorizontalPercentageXRegExp = new RegExp(\"(background-position-x\\\\s*:\\\\s*)(-?\" + numPattern + \"%)\", \"gi\"), // border-radius: <length or percentage>{1,4} [optional: / <length or percentage>{1,4} ]\n    borderRadiusRegExp = new RegExp(\"(border-radius\\\\s*:\\\\s*)\" + signedQuantPattern + \"(?:(?:\\\\s+\" + signedQuantPattern + \")(?:\\\\s+\" + signedQuantPattern + \")?(?:\\\\s+\" + signedQuantPattern + \")?)?\" + \"(?:(?:(?:\\\\s*\\\\/\\\\s*)\" + signedQuantPattern + \")(?:\\\\s+\" + signedQuantPattern + \")?(?:\\\\s+\" + signedQuantPattern + \")?(?:\\\\s+\" + signedQuantPattern + \")?)?\" + suffixPattern, \"gi\"), boxShadowRegExp = new RegExp(\"(box-shadow\\\\s*:\\\\s*(?:inset\\\\s*)?)\" + signedQuantPattern, \"gi\"), textShadow1RegExp = new RegExp(\"(text-shadow\\\\s*:\\\\s*)\" + signedQuantPattern + \"(\\\\s*)\" + colorPattern, \"gi\"), textShadow2RegExp = new RegExp(\"(text-shadow\\\\s*:\\\\s*)\" + colorPattern + \"(\\\\s*)\" + signedQuantPattern, \"gi\"), textShadow3RegExp = new RegExp(\"(text-shadow\\\\s*:\\\\s*)\" + signedQuantPattern, \"gi\"), translateXRegExp = new RegExp(\"(transform\\\\s*:[^;}]*)(translateX\\\\s*\\\\(\\\\s*)\" + signedQuantPattern + \"(\\\\s*\\\\))\", \"gi\"), translateRegExp = new RegExp(\"(transform\\\\s*:[^;}]*)(translate\\\\s*\\\\(\\\\s*)\" + signedQuantPattern + \"((?:\\\\s*,\\\\s*\" + signedQuantPattern + \"){0,2}\\\\s*\\\\))\", \"gi\");\n    /**\n\t * Invert the horizontal value of a background position property.\n\t *\n\t * @private\n\t * @param {string} match Matched property\n\t * @param {string} pre Text before value\n\t * @param {string} value Horizontal value\n\t * @return {string} Inverted property\n\t */ function calculateNewBackgroundPosition(match, pre, value) {\n        var idx, len;\n        if (value.slice(-1) === \"%\") {\n            idx = value.indexOf(\".\");\n            if (idx !== -1) {\n                // Two off, one for the \"%\" at the end, one for the dot itself\n                len = value.length - idx - 2;\n                value = 100 - parseFloat(value);\n                value = value.toFixed(len) + \"%\";\n            } else {\n                value = 100 - parseFloat(value) + \"%\";\n            }\n        }\n        return pre + value;\n    }\n    /**\n\t * Invert a set of border radius values.\n\t *\n\t * @private\n\t * @param {Array} values Matched values\n\t * @return {string} Inverted values\n\t */ function flipBorderRadiusValues(values) {\n        switch(values.length){\n            case 4:\n                values = [\n                    values[1],\n                    values[0],\n                    values[3],\n                    values[2]\n                ];\n                break;\n            case 3:\n                values = [\n                    values[1],\n                    values[0],\n                    values[1],\n                    values[2]\n                ];\n                break;\n            case 2:\n                values = [\n                    values[1],\n                    values[0]\n                ];\n                break;\n            case 1:\n                values = [\n                    values[0]\n                ];\n                break;\n        }\n        return values.join(\" \");\n    }\n    /**\n\t * Invert a set of border radius values.\n\t *\n\t * @private\n\t * @param {string} match Matched property\n\t * @param {string} pre Text before value\n\t * @param {string} [firstGroup1]\n\t * @param {string} [firstGroup2]\n\t * @param {string} [firstGroup3]\n\t * @param {string} [firstGroup4]\n\t * @param {string} [secondGroup1]\n\t * @param {string} [secondGroup2]\n\t * @param {string} [secondGroup3]\n\t * @param {string} [secondGroup4]\n\t * @param {string} [post] Text after value\n\t * @return {string} Inverted property\n\t */ function calculateNewBorderRadius(match, pre) {\n        var values, args = [].slice.call(arguments), firstGroup = args.slice(2, 6).filter(function(val) {\n            return val;\n        }), secondGroup = args.slice(6, 10).filter(function(val) {\n            return val;\n        }), post = args[10] || \"\";\n        if (secondGroup.length) {\n            values = flipBorderRadiusValues(firstGroup) + \" / \" + flipBorderRadiusValues(secondGroup);\n        } else {\n            values = flipBorderRadiusValues(firstGroup);\n        }\n        return pre + values + post;\n    }\n    /**\n\t * Flip the sign of a CSS value, possibly with a unit.\n\t *\n\t * We can't just negate the value with unary minus due to the units.\n\t *\n\t * @private\n\t * @param {string} value\n\t * @return {string}\n\t */ function flipSign(value) {\n        if (parseFloat(value) === 0) {\n            // Don't mangle zeroes\n            return value;\n        }\n        if (value[0] === \"-\") {\n            return value.slice(1);\n        }\n        return \"-\" + value;\n    }\n    /**\n\t * @private\n\t * @param {string} match\n\t * @param {string} property\n\t * @param {string} offset\n\t * @return {string}\n\t */ function calculateNewShadow(match, property, offset) {\n        return property + flipSign(offset);\n    }\n    /**\n\t * @private\n\t * @param {string} match\n\t * @param {string} property\n\t * @param {string} prefix\n\t * @param {string} offset\n\t * @param {string} suffix\n\t * @return {string}\n\t */ function calculateNewTranslate(match, property, prefix, offset, suffix) {\n        return property + prefix + flipSign(offset) + suffix;\n    }\n    /**\n\t * @private\n\t * @param {string} match\n\t * @param {string} property\n\t * @param {string} color\n\t * @param {string} space\n\t * @param {string} offset\n\t * @return {string}\n\t */ function calculateNewFourTextShadow(match, property, color, space, offset) {\n        return property + color + space + flipSign(offset);\n    }\n    return {\n        /**\n\t\t * Transform a left-to-right stylesheet to right-to-left.\n\t\t *\n\t\t * @param {string} css Stylesheet to transform\n\t\t * @param {Object} options Options\n\t\t * @param {boolean} [options.transformDirInUrl=false] Transform directions in URLs\n\t\t * (e.g. 'ltr', 'rtl')\n\t\t * @param {boolean} [options.transformEdgeInUrl=false] Transform edges in URLs\n\t\t * (e.g. 'left', 'right')\n\t\t * @return {string} Transformed stylesheet\n\t\t */ \"transform\": function(css, options) {\n            // Use single quotes in this object literal key for closure compiler.\n            // Tokenizers\n            var noFlipSingleTokenizer = new Tokenizer(noFlipSingleRegExp, noFlipSingleToken), noFlipClassTokenizer = new Tokenizer(noFlipClassRegExp, noFlipClassToken), commentTokenizer = new Tokenizer(commentRegExp, commentToken);\n            // Tokenize\n            css = commentTokenizer.tokenize(noFlipClassTokenizer.tokenize(noFlipSingleTokenizer.tokenize(// We wrap tokens in ` , not ~ like the original implementation does.\n            // This was done because ` is not a legal character in CSS and can only\n            // occur in URLs, where we escape it to %60 before inserting our tokens.\n            css.replace(\"`\", \"%60\"))));\n            // Transform URLs\n            if (options.transformDirInUrl) {\n                // Replace 'ltr' with 'rtl' and vice versa in background URLs\n                css = css.replace(ltrInUrlRegExp, \"$1\" + temporaryToken).replace(rtlInUrlRegExp, \"$1ltr\").replace(temporaryTokenRegExp, \"rtl\");\n            }\n            if (options.transformEdgeInUrl) {\n                // Replace 'left' with 'right' and vice versa in background URLs\n                css = css.replace(leftInUrlRegExp, \"$1\" + temporaryToken).replace(rightInUrlRegExp, \"$1left\").replace(temporaryTokenRegExp, \"right\");\n            }\n            // Transform rules\n            css = css// Replace direction: ltr; with direction: rtl; and vice versa.\n            .replace(directionLtrRegExp, \"$1\" + temporaryToken).replace(directionRtlRegExp, \"$1ltr\").replace(temporaryTokenRegExp, \"rtl\")// Flip rules like left: , padding-right: , etc.\n            .replace(leftRegExp, \"$1\" + temporaryToken).replace(rightRegExp, \"$1left\").replace(temporaryTokenRegExp, \"right\")// Flip East and West in rules like cursor: nw-resize;\n            .replace(cursorEastRegExp, \"$1$2\" + temporaryToken).replace(cursorWestRegExp, \"$1$2e-resize\").replace(temporaryTokenRegExp, \"w-resize\")// Border radius\n            .replace(borderRadiusRegExp, calculateNewBorderRadius)// Shadows\n            .replace(boxShadowRegExp, calculateNewShadow).replace(textShadow1RegExp, calculateNewFourTextShadow).replace(textShadow2RegExp, calculateNewFourTextShadow).replace(textShadow3RegExp, calculateNewShadow)// Translate\n            .replace(translateXRegExp, calculateNewTranslate).replace(translateRegExp, calculateNewTranslate)// Swap the second and fourth parts in four-part notation rules\n            // like padding: 1px 2px 3px 4px;\n            .replace(fourNotationQuantRegExp, \"$1$2$3$8$5$6$7$4$9\").replace(fourNotationColorRegExp, \"$1$2$3$8$5$6$7$4$9\")// Flip horizontal background percentages\n            .replace(bgHorizontalPercentageRegExp, calculateNewBackgroundPosition).replace(bgHorizontalPercentageXRegExp, calculateNewBackgroundPosition);\n            // Detokenize\n            css = noFlipSingleTokenizer.detokenize(noFlipClassTokenizer.detokenize(commentTokenizer.detokenize(css)));\n            return css;\n        }\n    };\n}\n/* Initialization */ cssjanus = new CSSJanus();\n/* Exports */ if ( true && module.exports) {\n    /**\n\t * Transform a left-to-right stylesheet to right-to-left.\n\t *\n\t * This function is a static wrapper around the transform method of an instance of CSSJanus.\n\t *\n\t * @param {string} css Stylesheet to transform\n\t * @param {Object|boolean} [options] Options object, or transformDirInUrl option (back-compat)\n\t * @param {boolean} [options.transformDirInUrl=false] Transform directions in URLs\n\t * (e.g. 'ltr', 'rtl')\n\t * @param {boolean} [options.transformEdgeInUrl=false] Transform edges in URLs\n\t * (e.g. 'left', 'right')\n\t * @param {boolean} [transformEdgeInUrl] Back-compat parameter\n\t * @return {string} Transformed stylesheet\n\t */ exports.transform = function(css, options, transformEdgeInUrl) {\n        var norm;\n        if (typeof options === \"object\") {\n            norm = options;\n        } else {\n            norm = {};\n            if (typeof options === \"boolean\") {\n                norm.transformDirInUrl = options;\n            }\n            if (typeof transformEdgeInUrl === \"boolean\") {\n                norm.transformEdgeInUrl = transformEdgeInUrl;\n            }\n        }\n        return cssjanus.transform(css, norm);\n    };\n} else if (false) {}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/cssjanus/src/cssjanus.js\n");

/***/ })

};
;