import { afterAll, describe, expect, it } from "vitest";
import { {{pascalCase name}} } from "../src/services/{{snakeCase name}}";
import { getRandom } from './utils';
{{#each relationships}}
  {{#when relation_type 'eq' 'many-to-one'}}
    {{#if not_null}}
import { getOrCreate{{pascalCase entity}} } from "./{{snakeCase entity}}.test";
    {{/if}}
  {{/when}}
  {{#when relation_type 'eq' 'many-to-many'}}
    {{#if not_null}}
import { getOrCreate{{pascalCase first_entity}} } from "./{{snakeCase first_entity}}.test";
import { getOrCreate{{pascalCase second_entity}} } from "./{{snakeCase second_entity}}.test";
    {{/if}}
  {{/when}}
{{/each}}


// @ts-expect-error ignore any type error
let entity_id;
{{#each relationships}}
  {{#when relation_type 'eq' 'many-to-one'}}
    {{#if not_null}}
// @ts-expect-error ignore any type error
let {{snakeCase entity}};
    {{/if}}
  {{/when}}
  {{#when relation_type 'eq' 'many-to-many'}}
    {{#if not_null}}
// @ts-expect-error ignore any type error
let {{snakeCase first_entity}};
// @ts-expect-error ignore any type error
let {{snakeCase second_entity}};
    {{/if}}
  {{/when}}
{{/each}}

export async function getOrCreate{{pascalCase name}}() {
    let {{snakeCase name}} = await {{pascalCase name}}.findOneByCriteria({})
    if (!{{snakeCase name}}) {
      // @ts-expect-error ignore error
      {{snakeCase name}} = await createAndSave{{pascalCase name}}();
    }
    return {{snakeCase name}};
}

export async function createAndSave{{pascalCase name}}() {
    {{#each relationships}}
      {{#when relation_type 'eq' 'many-to-one'}}
        {{#if not_null}}
    {{snakeCase entity}} = await getOrCreate{{pascalCase entity}}();
        {{/if}}
      {{/when}}
      {{#when relation_type 'eq' 'many-to-many'}}
        {{#if not_null}}
    {{snakeCase first_entity}} = await getOrCreate{{pascalCase first_entity}}();
    {{snakeCase second_entity}} = await getOrCreate{{pascalCase second_entity}}();
        {{/if}}
      {{/when}}
    {{/each}}
    // @ts-expect-error ignore error
    return {{pascalCase name}}.create(get{{pascalCase name}}Instance());
}

export async function remove{{pascalCase name}}(id: number) {
    // run delete query to clean database
    await {{pascalCase name}}.hard_remove(id);
}

function get{{pascalCase name}}Instance() {
    return {
        {{#each attributes}}
        "{{snakeCase attribute}}": getRandom('{{type}}'{{#when type 'eq' 'varchar'}}, {{varchar_length}}{{/when}}),
        {{/each}}
        {{#each relationships}}
          {{#when relation_type 'eq' 'many-to-one'}}
            {{#if not_null}}
        // @ts-expect-error ignore any type error
        "{{snakeCase entity}}_id": {{snakeCase entity}}.id,
            {{/if}}
          {{/when}}
          {{#when relation_type 'eq' 'many-to-many'}}
            {{#if not_null}}
        // @ts-expect-error ignore any type error
        "{{snakeCase first_entity}}_id": {{snakeCase first_entity}}.id,
        // @ts-expect-error ignore any type error
        "{{snakeCase second_entity}}_id": {{snakeCase second_entity}}.id,
            {{/if}}
          {{/when}}
        {{/each}}
    };
}

describe('{{pascalCase name}} Tests', () => {

    afterAll(async () => {
        // @ts-expect-error ignore any type error
        await remove{{pascalCase name}}(entity_id);
    })

    it("Create", async () => {
        const response = await createAndSave{{pascalCase name}}();
        expect(response).toBeDefined();
        expect(response!.entity).toBeDefined();
        expect(response!.entity!.id).toBeTruthy();
        entity_id = response!.entity!.id;
    });

    it("Update", async () => {
        const response = await {{pascalCase name}}.update(
            entity_id!,
            { "{{snakeCase attributes.0.attribute}}": getRandom('{{attributes.0.type}}') }
        );
        expect(response).toBeDefined();
        expect(response!.entity).toBeDefined();
        expect(response!.entity!.id).toEqual(entity_id);
    });

    it("List", async () => {
        const response = await {{pascalCase name}}.list();
        expect(response).toBeDefined();
        expect(response.length).toBeGreaterThan(0);
    });

    it("Get by ID", async () => {
        const response = await {{pascalCase name}}.get(entity_id!);
        expect(response).toBeTruthy();
        expect(response!.id).toEqual(entity_id!);
    });

    it("Search", async () => {
        // @ts-expect-error ignore any type error
        const response: [] = await {{pascalCase name}}.findByCriteria({
            "id": entity_id!
        });
        expect(response).toBeTruthy();
        expect(response).toHaveLength(1);
        // @ts-expect-error ignore possible undefined
        expect(response[0].id).toEqual(entity_id!);
    });

    it("Delete", async () => {
        const response = await {{pascalCase name}}.list();
        await {{pascalCase name}}.remove(entity_id!, "unit_test");
        const list = await {{pascalCase name}}.list();

        expect(response).toBeTruthy();
        expect(list).toBeDefined();
    });
});
