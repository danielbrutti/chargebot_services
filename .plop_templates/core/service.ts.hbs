export * as {{pascalCase name}} from "./{{snakeCase name}}";
import db{{#if relationships}}, { Database }{{/if}} from '../database';
{{#if relationships}}
import { ExpressionBuilder } from "kysely";
import { jsonObjectFrom } from 'kysely/helpers/postgres'
{{/if}}
import { {{pascalCase name}}, {{pascalCase name}}Update, New{{pascalCase name}} } from "../database/{{snakeCase name}}";

{{#each relationships}}
function with{{pascalCase entity}}(eb: ExpressionBuilder<Database, '{{snakeCase ../name}}'>) {
    return jsonObjectFrom(
      eb.selectFrom('{{snakeCase entity}}')
        .selectAll()
        .whereRef('{{snakeCase entity}}.id', '=', '{{snakeCase ../name}}.{{snakeCase entity}}_id')
    ).as('{{snakeCase entity}}')
}
{{/each}}

export async function create({{snakeCase name}}: New{{pascalCase name}}): Promise<{{pascalCase name}} | undefined> {
    return await db
        .insertInto('{{snakeCase name}}')
        .values({{snakeCase name}})
        .returningAll()
        .executeTakeFirst();
}

export async function update(id: number, {{snakeCase name}}: {{pascalCase name}}Update): Promise<{{pascalCase name}} | undefined> {
    return await db
        .updateTable('{{snakeCase name}}')
        .set({{snakeCase name}})
        .where('id', '=', id)
        .where('deleted_by', 'is', null)
        .returningAll()
        .executeTakeFirst();
}

export async function remove(id: number, user_id: string): Promise<{ id: number | undefined } | undefined> {
    return await db
        .updateTable('{{snakeCase name}}')
        .set({ deleted_date: new Date(), deleted_by: user_id })
        .where('id', '=', id)
        .where('deleted_by', 'is', null)
        .returning(['id'])
        .executeTakeFirst();
}

export async function hard_remove(id: number): Promise<{ id: number | undefined } | undefined> {
    return await db
        .deleteFrom('{{snakeCase name}}')
        .where('id', '=', id)
        .returning(['id'])
        .executeTakeFirst();
}

export async function list(): Promise<{{pascalCase name}}[]> {
    return await db
        .selectFrom("{{snakeCase name}}")
        .selectAll()
        .where('deleted_by', 'is', null)
        .execute();
}

export async function get(id: number): Promise<{{pascalCase name}} | undefined> {
    return await db
        .selectFrom("{{snakeCase name}}")
        .selectAll()
        {{#each relationships}}
        {{#if eager}}
        .select((eb) => with{{pascalCase entity}}(eb))
        {{else}}
        // uncoment to enable eager loading
        //.select((eb) => with{{pascalCase entity}}(eb))
        {{/if}}
        {{/each}}
        .where('id', '=', id)
        .where('deleted_by', 'is', null)
        .executeTakeFirst();
}

export async function findByCriteria(criteria: Partial<{{pascalCase name}}>) {
  let query = db.selectFrom('{{snakeCase name}}').where('deleted_by', 'is', null)

  if (criteria.id) {
    query = query.where('id', '=', criteria.id);
  }

{{#each attributes}}
{{#when tsType 'eq' 'string'}}
  if (criteria.{{snakeCase attribute}} !== undefined) {
    query = query.where(
      '{{snakeCase attribute}}', 
      criteria.{{snakeCase attribute}} === null ? 'is' : '=', 
      criteria.{{snakeCase attribute}}
    );
  }
{{/when}}
{{#when tsType 'neq' 'string'}}
  if (criteria.{{snakeCase attribute}}) {
    query = query.where('{{snakeCase attribute}}', '=', criteria.{{snakeCase attribute}});
  }
{{/when}}
{{/each}}

  if (criteria.created_by) {
    query = query.where('created_by', '=', criteria.created_by);
  }

  if (criteria.modified_by !== undefined) {
    query = query.where(
      'modified_by', 
      criteria.modified_by === null ? 'is' : '=', 
      criteria.modified_by
    );
  }

  return await query.selectAll().execute();
}
