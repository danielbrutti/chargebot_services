import Joi from 'joi';
import { AuditedEntityCreateSchemaDef, AuditedEntityUpdateSchemaDef, AuditedEntitySchemaDef, JsonResponseSchemaDef } from "../shared/schemas";
{{#each relationships}}
{{#if eager}}
import { {{pascalCase entity}}Schema } from "../{{snakeCase entity}}/{{snakeCase entity}}.schema";
{{else}}
// uncoment to enable eager loading
//import { {{pascalCase entity}}Schema } from "../{{snakeCase entity}}/{{snakeCase entity}}.schema";
{{/if}}
{{/each}}

const {{pascalCase name}}SchemaDef = {
    {{#each attributes}}
    {{#when tsType 'eq' 'string'}}
    {{snakeCase attribute}}: Joi.string(){{#when varchar_length "gt" 0}}.max({{varchar_length}}){{/when}},
    {{/when}}
    {{#when tsType 'eq' 'number'}}
    {{snakeCase attribute}}: Joi.number(),
    {{/when}}
    {{#when tsType 'eq' 'Date'}}
    {{snakeCase attribute}}: Joi.date(),
    {{/when}}
    {{#when tsType 'eq' 'boolean'}}
    {{snakeCase attribute}}: Joi.boolean(),
    {{/when}}
    {{/each}}
};

export const {{pascalCase name}}Schema = Joi.object({
    ...AuditedEntitySchemaDef,
    ...{{pascalCase name}}SchemaDef,
    {{#each relationships}}
    {{snakeCase entity}}_id: Joi.number(),
    {{/each}}
    {{#each relationships}}
    {{#if eager}}
    {{snakeCase entity}}: {{pascalCase entity}}Schema,
    {{else}}
    // uncoment to enable eager loading
    //{{snakeCase entity}}: {{pascalCase entity}}Schema,
    {{/if}}
    {{/each}}
});

export const Create{{pascalCase name}}Schema = Joi.object({
    ...AuditedEntityCreateSchemaDef,
    ...{{pascalCase name}}SchemaDef
}).keys({
    // overwrite keys for required attributes
    {{#each attributes}}
    {{#when unique 'or' not_null}}
    {{#when tsType 'eq' 'string'}}
    {{snakeCase attribute}}: Joi.string(){{#when varchar_length "gt" 0}}.max({{varchar_length}}){{/when}}.required(),
    {{/when}}
    {{#when tsType 'eq' 'number'}}
    {{snakeCase attribute}}: Joi.number().required(),
    {{/when}}
    {{#when tsType 'eq' 'Date'}}
    {{snakeCase attribute}}: Joi.date().required(),
    {{/when}}
    {{#when tsType 'eq' 'boolean'}}
    {{snakeCase attribute}}: Joi.boolean().required(),
    {{/when}}
    {{/when}}
    {{/each}}
    {{#each relationships}}
    {{#if not_null}}
    {{snakeCase entity}}_id: Joi.number().required(),
    {{else}}
    {{snakeCase entity}}_id: Joi.number(),
    {{/if}}
    {{/each}}
});;

export const Update{{pascalCase name}}Schema = Joi.object({
    ...AuditedEntityUpdateSchemaDef,
    ...{{pascalCase name}}SchemaDef
});

export const Search{{pascalCase name}}Schema = Joi.object({
    id: Joi.number(),
    ...{{pascalCase name}}SchemaDef
});

export const {{pascalCase name}}ResponseSchema = Joi.object({
    ...JsonResponseSchemaDef,
    body: {{pascalCase name}}Schema
});

export const {{pascalCase name}}ArrayResponseSchema = Joi.object({
    ...JsonResponseSchemaDef,
    body: Joi.array().items({{pascalCase name}}Schema)
});